{"version":3,"file":"map.js","sources":["../utils/math.js","../utils/map.js"],"sourcesContent":["export const getMin = (items, attribute) => {\n  let min = 100\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value < min) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nexport const getMax = (items, attribute) => {\n  let max = 0\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value > max) {\n      max = value\n    }\n  })\n\n  return max\n}\n","import geoViewport from '@mapbox/geo-viewport'\nimport axios from \"axios\"\n\nimport * as turf from '@turf/helpers'\nimport { featureCollection } from '@turf/helpers'\nimport { featureEach } from '@turf/meta'\nimport { clusterEach } from '@turf/clusters'\nimport bboxPolygon from '@turf/bbox-polygon'\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\"\nimport turf_center from '@turf/center'\nimport turf_distance from '@turf/distance'\nimport turf_truncate from '@turf/truncate'\nimport clustersDbscan from '@turf/clusters-dbscan'\nimport pointsWithinPolygon from '@turf/points-within-polygon'\nimport rhumbBearing from '@turf/rhumb-bearing'\nimport rhumbDistance from '@turf/rhumb-distance'\nimport rhumbDestination from '@turf/rhumb-destination'\n\nimport querystring from 'querystring'\nimport { getMax } from './math'\n\nexport const geocodeAddress = async (\n    key = 'AIzaSyAJfpSSx6pudnbjILmdUPBG7O4Diu2RHgE',\n    address = `Red Bay Coffee Roasers`,\n    city = null\n) => {\n    // Args to query params\n    const params = new URLSearchParams({\n        address: address,\n        key: key\n    })\n\n    if (key == null) return {\n        error: true,\n        data: null,\n        message: `No API key provided.`\n    }\n\n    const useNetlify = true\n    const domain = useNetlify\n        ? 'https://vibemap-production.netlify.app/googleGeocoder'\n        : 'https://vibemap.com/googleGeocoder'\n\n    const endpoint = `${domain}?${params.toString()}${city ? '&components=locality=' + city : ''}`\n\n    const response = await axios.get(endpoint).catch(error => {\n        console.log(`error `, error)\n        return {\n            error: true,\n            data: error\n        }\n    })\n\n    // Handle CORS and other issues if the response is null\n    const results = response && response.data && response.data.results\n        ? response.data.results\n        : null\n\n\n    // Look up the place, if there's a Google Place ID\n    if (results && results.length > 0 && results[0].place_id) {\n        const id = results[0].place_id\n        const placeResults = await getPlaceDetails(key, id)\n\n        const place = placeResults.data\n\n        if (placeResults.error !== true) {\n            // Give it an ID to be consistent with Vibemap schema\n            place.id = id\n            place.source = 'google'\n\n            // TODO: Make a place to geoJSON method\n            const location = place.geometry.location\n            place.geometry.coordinates = [location.lng, location.lat]\n\n            place.properties = {\n                name: place.name,\n                aggregate_rating: place.rating,\n                address: place.address,\n                telephone: place.formatted_phone_number,\n                tips: place.reviews\n                    ? place.reviews.map(review => review.text)\n                    : [],\n                url: place.url\n            }\n        }\n\n        // Return just the results\n        return {\n            error: false,\n            data: {\n                place: placeResults.data,\n                results: results\n            }\n        }\n    } else {\n        // Return just the resuls\n        return {\n            error: false,\n            data: {\n                place: null,\n                results: response.data\n            }\n        }\n    }\n}\n\nexport const getPlaceDetails = async (\n    key = null,\n    place_id = 'ChIJAQDsXLeAj4ARx-92_aeMjX4'\n) => {\n\n    if (key == null) return {\n        error: true,\n        data: null,\n        message: `No API key provided.`\n    }\n\n    const params = new URLSearchParams({\n        key: key,\n        place_id: place_id\n    })\n\n\n    const useNetlify = true\n    const domain = useNetlify\n        ? 'https://vibemap-production.netlify.app/googlePlaces'\n        : 'https://vibemap.com/googlePlaces'\n\n    const endpoint = `${domain}?${params.toString()}`\n\n    const response = await axios.get(endpoint).catch(error => {\n        console.log(`error `, error)\n        return {\n            error: true,\n            data: null\n        }\n    })\n\n    if (response.error || response.data == null || !response.data.result) {\n        return {\n            error: true,\n            data: response.data\n        }\n    }\n\n    const googlePlace = response.data.result\n    const place = {\n        ...googlePlace,\n        address: googlePlace.formatted_address,\n        url: googlePlace.website,\n    }\n\n    return {\n        error: false,\n        data: place\n    }\n}\n\nexport const getPlaceSocial = async (key, query = 'Vibemap', cse_id = '08cefff08b1db59b1') => {\n    if (key == null || key == undefined) return {\n        error: true,\n        data: null,\n        message: `No API key provided.`\n    }\n\n    const params = new URLSearchParams({\n        key: key,\n        'q': query,\n        'cx': cse_id\n    })\n\n    console.log(`Params to strng `, params.toString());\n\n    const endpoint = `GET https://customsearch.googleapis.com/customsearch/v1\n        ?${params.toString()} HTTP/1.1`\n\n    const response = await axios.get(endpoint).catch(error => {\n        console.log(`error `, error)\n        return {\n            error: true,\n            data: error\n        }\n    })\n\n    console.log(`Response `, response);\n}\n\n// Returns area for a boundary in miles\nexport const getArea = (bounds) => {\n\n    //let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [window.width, window.height])\n    let height = turf_distance(\n        [bounds[0], bounds[1]], // Southwest\n        [bounds[0], bounds[3]], // Northwest\n        { units: 'miles' }\n    )\n\n    let width = turf_distance(\n        [bounds[0], bounds[1]], // Southwest\n        [bounds[2], bounds[1]], // Southeast\n        { units: 'miles' }\n    )\n\n    let area = height * width\n\n    return area\n}\n\n// Give the boundaries for a centerpoint and zoom level\nexport const getBounds = (location, zoom, size) => {\n\n    let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [size.width, size.height], 512)\n\n    return bounds\n}\n\n// Point is a [lng, lat] coordinate array\n// Bounds is a [sw, ne] coordinate array\nexport const isPointInBounds = (point, bounds) => {\n\n    const pointToCheck = turf.point(point)\n    const shape = getPolygon(bounds)\n\n    const isInside = booleanPointInPolygon(pointToCheck, shape)\n\n\n    return isInside\n}\n\nexport const getPolygon = (bounds) => {\n    var polygon = bboxPolygon(bounds);\n\n    return polygon\n}\n\nexport const getClusters = (places, cluster_size) => {\n    let collection = featureCollection(places)\n    let results = []\n\n    let clustered = clustersDbscan(collection, cluster_size / 1000, { mutate: true, minPoints: 2 })\n\n    clusterEach(clustered, 'cluster', function (cluster, clusterValue) {\n        // Only adjust clusters\n        if (clusterValue !== 'null') {\n            let center = turf_center(cluster)\n\n            let max_score = getMax(cluster.features, 'average_score')\n            let size = cluster.features.length\n\n            /* For testing purposes:\n            console.log('--- Max score for cluster: ', max_score)\n            console.log('--- Center of cluster: ', center)\n            console.log('--- Size of cluster: ', size)\n            */\n\n            // TODO: Handle sorting & sizing based on score and distance.\n            featureEach(cluster, function (currentFeature, featureIndex) {\n\n                let fields = currentFeature.properties\n                let vibes_score = fields.vibes_score\n                let score_diff = max_score - vibes_score\n\n                let rhumb_distance = rhumbDistance(center, currentFeature)\n                let bearing = rhumbBearing(center, currentFeature)\n                let destination = rhumbDestination(center, rhumb_distance * 2, bearing)\n\n                // Move the point based on the rhumb distance and bearing from the cluster center.\n                fields.offset = destination.geometry\n\n                // Give point more cluster attributes\n                fields.cluster_size = size\n                fields.in_cluster = true\n                fields.top_in_cluster = false\n\n                if (fields.average_score >= max_score) {\n                    fields.top_in_cluster = true\n                } else {\n                    fields.icon_size = fields.icon_size / 2\n                }\n\n                //currentFeature.properties.vibe_score = (vibe_score - score_diff) * bonus\n\n                currentFeature.properties = fields\n                results.push(currentFeature)\n                //=currentFeature\n                //=featureIndex\n                //console.log(\"Cluster: \", currentFeature.properties.dbscan)\n            })\n        } else {\n            featureEach(cluster, function (currentFeature, featureIndex) {\n                currentFeature.properties.in_cluster = false\n                currentFeature.properties.top_in_cluster = true\n\n                results.push(currentFeature)\n            })\n        }\n    })\n\n    // Put larger markers on top\n    // TODO: Also set the details for the cluster\n    // TODO: Define sorting one place so it dones't get messed up\n    results = results.sort((a, b) => {\n        return b.properties.average_score - a.properties.average_score\n    })\n\n    return results\n}\n\nexport const getDistance = (point_a, point_b) => {\n\n    let new_distance = turf_distance(\n        [point_a[0], point_a[1]],\n        [point_b[0], point_b[1]],\n        { units: 'miles' }\n    )\n\n    return new_distance\n}\n\n// Get pixel distance of bounds\n// TODO: This should be named better\nexport const getDistanceToPixels = (bounds, window) => {\n    const left = bounds[0]\n    const bottom = bounds[1]\n    const right = bounds[2]\n\n    const options = { unit: 'miles' }\n\n    const latitudinal_distance = turf_distance([left, bottom], [right, bottom], options)\n\n    let pixel_ratio = latitudinal_distance / window.width\n\n    return pixel_ratio\n\n}\n\nexport const getFeaturesInBounds = (features, bounds) => {\n    // TODO: Will it be faster to keep features in a collection and use the turf each method?\n    const collection = featureCollection(features.map(feature => {\n        // Temp fix for any features that are style type event/places\n        feature.type = 'Feature'\n        return feature\n    }))\n\n    //const box = bbox(lineString(bounds))\n    const parsedBounds = bounds && bounds.flat\n        ? bounds.flat()\n        : bounds\n\n    try {\n        const polygon = bboxPolygon(parsedBounds);\n        const pointsInBounds = pointsWithinPolygon(collection, polygon)\n        return pointsInBounds.features;\n    } catch (error) {\n        console.log('Problem with bounds ', bounds, error);\n        console.error('Problem with bounds ', bounds, error);\n        return features\n    }\n}\n\nexport const getFeaturesFromSource = (e, loaded, zoom = 12) => {\n    // Is the source and tile loaded\n    const isSourceLoaded = e ? e.isSourceLoaded : false\n    const sourceId = e ? e.sourceId : null\n\n    let bounds = null\n    const clusterSize = (zoom / 2) * 20\n\n    if (mapRef.current) {\n        const map = mapRef.current.getMap()\n        bounds = map.getBounds().toArray()\n\n        // Map is loaded or places layer changed\n        if (loaded ||\n            isSourceLoaded && sourceId === 'public.places_vt' ||\n            isSourceLoaded && sourceId === 'places_data' ||\n            isSourceLoaded && sourceId === 'composite') {\n            // Loads date to json that is filtered by the client based on nav state\n            const source_features = map.querySourceFeatures('public.places_vt', { sourceLayer: 'public.places_vt' })\n            const center_point = [viewport.longitude, viewport.latitude]\n\n            /* TODO: probably best to do clustering and sorting outside */\n            const places = placesFromTile(source_features, 'places', bounds, center_point, viewport.zoom)\n            return places\n        } else {\n            return null\n        }\n    }\n}\n\nexport const getDirections = async (waypoints, token, mode = 'walking') => {\n    return new Promise(function (resolve, reject) {\n        const service = `https://api.mapbox.com/directions/v5/mapbox/${mode}/`\n        let query = querystring.stringify({\n            access_token: token,\n            geometries: 'geojson',\n            steps: true,\n            waypoints: []\n        })\n\n        const start = waypoints[0]\n        const end = waypoints[waypoints.length - 1]\n\n        let start_end = String(start) + ';' + String(end)\n        //if (waypoints !== undefined) query['waypoints'] = query += 'waypoints=' + waypoints.join(';')\n\n        start_end = waypoints.join(';')\n        //console.log('Getting directions for ', start_end, query)\n\n        fetch(service + start_end + \"?\" + query)\n            .then(data => data.json())\n            .then(res => {\n                //console.log('Got Directions: ', res)\n                resolve({ data: res, loading: false, timedOut: false })\n\n            }, (error) => {\n                console.log(error)\n            });\n    })\n}\n\nexport const getWaypoints = (features) => {\n    const waypoints = features.map(feature => feature['geometry']['coordinates'])\n\n    return waypoints\n}\n\nexport const getBestRoute = (directions) => {\n\n    let bestRoute = directions['data']['routes'][0]\n\n    let geojson = {\n        type: 'Feature',\n        properties: {\n            distance: bestRoute['distance']\n        },\n        geometry: {\n            type: 'LineString',\n            coordinates: bestRoute['geometry']['coordinates']\n        }\n    }\n\n    return geojson\n\n}\n\n/* There are a few different location and geometric objects in our system:\n    - City: object with center point and location, sourced from Wordpress CMS\n    - Location: an object with a latitude, longitude, and centerpoint\n    - Center Point: A point array of [lng, lat]\n    - Point String: Stringified center point\n */\n\nexport const getLocationFromPoint = (point = [-122.269994, 37.806507]) => {\n    const location = {\n        centerpoint: point,\n        longitude: point[0],\n        latitude: point[1]\n    }\n\n    return location\n}\n\nexport const getPointFromLocation = (location = {\n    latitude: 37.806507,\n    longitude: -122.269994\n}) => {\n    const point = [location.longitude, location.latitude]\n    return point\n}\n\nexport const getMapStyles = () => {\n    return {\n        categories: {\n            going_out: '#e31a1c'\n        },\n\n        lens: {\n            'fill-color': '#007AFF',\n            'fill-opacity': 0.4,\n            'fill-outline-color': '#007AFF'\n        },\n\n        geolocateStyle: {\n            position: 'absolute',\n            right: 3,\n            top: 100,\n            width: 30\n        },\n\n        navigateStyle: {\n            top: 3,\n            right: 3\n        },\n\n        top_marker: {\n            // Icon Style\n            \"icon-size\": [\n                \"interpolate\",\n                [\"linear\"], [\"zoom\"],\n                8, 0.4,\n                16, 1,\n                22, 32\n            ],\n        },\n\n        marker_layout: {\n            // Icon Style\n            \"icon-image\": [\"to-string\", [\"get\", \"icon\"]],\n            \"icon-allow-overlap\": false,\n            \"icon-ignore-placement\": false,\n            \"icon-size\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                10,\n                [\"+\", [\"*\", [\"get\", \"average_score\"], 0.4], 0.2],\n                20,\n                [\"+\", [\"*\", [\"get\", \"average_score\"], 0.8], 0.2]\n            ],\n            \"symbol-sort-key\": [\"get\", \"vibe_score\"],\n            \"text-size\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 4,\n                14, 8,\n                20, 12\n            ],\n            //\"text-offset\": [0, -1.0],\n            //\"text-padding\": 1,\n            // Text\n            \"text-field\": [\"to-string\", [\"get\", \"short_name\"]],\n            \"text-anchor\": \"top\",\n            \"text-allow-overlap\": false,\n            \"text-ignore-placement\": false,\n            \"text-line-height\": 1.0,\n            'text-justify': 'auto',\n            'text-variable-anchor': ['top', 'bottom', 'right'],\n            \"text-font\": [\n                \"Public Sans Regular\",\n                \"Arial Unicode MS Regular\"\n            ],\n            \"text-max-width\": 10,\n            \"text-radial-offset\": 1.4,\n            'visibility': 'visible'\n        },\n\n        marker_paint: {\n            'text-color': '#7D7C84',\n            'icon-color': '#3475BA',\n            'text-halo-color': '#FFFFFF',\n            'text-halo-width': 1.2\n        },\n\n        route_layout: {\n            'line-join': 'round',\n            'line-cap': 'round'\n        },\n\n        route_paint: {\n            'line-color': '#3887be',\n            'line-width': 5,\n            'line-opacity': 0.75\n        },\n\n        top_pick_layout: {\n            // TODO: Make sure important sorting variable is working\n            //\"icon-image\": \"\",\n            \"icon-image\": [\"to-string\", [\"get\", \"icon\"]],\n            \"icon-size\": [\n                \"interpolate\",\n                [\"linear\"], [\"zoom\"],\n                8, 0.4,\n                22, 1.6\n                // 22, [\"get\", \"icon_size\"]\n            ],\n            \"symbol-sort-key\": [\"get\", \"vibe_score\"],\n            // Text\n            \"text-field\": [\n                \"match\",\n                [\"get\", \"top_in_cluster\"],\n                [\"false\"],\n                \"\",\n                [\"to-string\", [\"get\", \"short_name\"]]\n            ],\n            \"text-allow-overlap\": false,\n            \"icon-allow-overlap\": false,\n            \"icon-ignore-placement\": false,\n            \"text-ignore-placement\": false,\n            \"text-radial-offset\": [\n                \"interpolate\",\n                [\"linear\"], [\"zoom\"],\n                8, 0.6,\n                12, [\"-\", [\"get\", \"icon_size\"], 0],\n                14, [\"+\", [\"get\", \"icon_size\"], 0.0],\n                20, [\"+\", [\"get\", \"icon_size\"], 0.2]\n            ],\n            \"text-font\": [\n                \"Public Sans Bold\",\n                \"Arial Unicode MS Regular\"\n            ],\n            \"text-line-height\": 1.0,\n            \"text-letter-spacing\": 0,\n            \"text-anchor\": \"top\",\n            'text-variable-anchor': ['top', 'bottom', 'right'],\n            \"text-justify\": \"auto\",\n            \"text-size\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 8,\n                22, 14\n            ],\n            \"text-max-width\": 10,\n            'visibility': 'visible'\n        },\n\n        neighborhood_layout: {\n            \"text-size\": {\n                \"base\": 1,\n                \"stops\": [[10, 8], [18, 12]]\n            },\n            \"text-transform\": \"uppercase\",\n            \"text-padding\": 1,\n            \"text-field\": [\n                \"to-string\",\n                [\"get\", \"neighborhood\"]\n            ],\n            \"text-font\": [\"Public Sans Bold\"],\n            \"text-letter-spacing\": 0.1,\n            \"text-allow-overlap\": true,\n            \"text-ignore-placement\": true,\n            \"text-max-width\": 8,\n            \"visibility\": \"visible\"\n        },\n\n        neighborhood_paint: {\n            \"text-halo-color\": \"hsla(295, 100%, 100%, 0.8)\",\n            \"text-halo-width\": 1,\n            \"text-color\": \"hsl(253, 50%, 47%)\",\n            //\"text-halo-blur\": 0.6,\n            //\"text-opacity\": 0.33\n        },\n\n        top_pick_paint: {\n            'text-color': '#666666',\n            'text-halo-color': '#FFFFFF',\n            'text-halo-width': 1.4\n        },\n\n        top_vibe_layout: {\n            // Text\n            \"text-field\": [\n                // Dont show labels for clustered markers\n                //[\"match\", [\"get\", \"top_in_cluster\"], [true], null],\n                \"to-string\", [\"get\", \"top_vibe\"]\n            ],\n            \"text-font\": [\"Roboto Condensed Italic\"],\n            \"text-justify\": \"auto\",\n            \"text-anchor\": \"top\",\n            \"text-allow-overlap\": false,\n            \"icon-allow-overlap\": false,\n            \"icon-ignore-placement\": true,\n            \"text-ignore-placement\": true,\n            \"symbol-sort-key\": [\"get\", \"vibe_score\"],\n            \"text-size\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 6,\n                22, 20\n            ],\n            \"text-radial-offset\": [\n                \"interpolate\",\n                [\"linear\"], [\"zoom\"],\n                8, 0.4,\n                12, [\"-\", [\"get\", \"icon_size\"], 1.3],\n                15, [\"-\", [\"get\", \"icon_size\"], 1.0],\n                18, [\"-\", [\"get\", \"icon_size\"], 1.6]\n            ],\n            \"text-max-width\": 12\n        },\n\n        places_heatmap: {\n            'heatmap-radius': [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 1,\n                10, 16,\n                12, 32,\n                13, 40,\n                14, 60,\n                20, 200\n            ],\n            'heatmap-opacity': [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 0.4,\n                11, 0.2,\n                20, 0.3\n            ],\n            // This number is adjusted by React based on the relative density of the map area\n            'heatmap-intensity': 0.2,\n            /*\n            'heatmap-intensity': [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                8, 0.8,\n                10, 0.3,\n                12, 0.1,\n                14, 0.3,\n                20, 0.5\n            ],\n            */\n\n            // TODO: this should be average_score from backend vibe score\n            \"heatmap-weight\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"vibes_score\"],\n                1, 0.1,\n                2, 0.6,\n                10, 2\n            ],\n\n            \"heatmap-color\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"heatmap-density\"],\n                0.1,\n                \"hsla(240, 80%, 94%, 0.2)\",\n                // Replaced by heatmap.fifth\n                0.2,\n                \"hsla(125, 63%, 88%, 0.4)\",\n                // Replaced by heatmap.fourth\n                0.4,\n                \"hsla(192, 84%, 80%, 0.4)\",\n                // Replaced by heatmap.third\n                0.6,\n                \"hsla(274, 100%, 65%, 0.5)\",\n                // Replaced by heatmap.second\n                0.95,\n                \"hsla(300, 100%, 50%, 0.6)\",\n                // Replaced by heatmap.first\n                1.1,\n                \"hsla(42, 100%, 64%, 0.6)\",\n                /* The pink is too much?\n                1.2,\n                \"hsla(42, 88%, 65%, 0.9)\"\n                */\n            ]\n        },\n\n        /*\n        tile_layer_layout: {\n            'line-cap': 'round',\n            'line-join': 'round'\n        },\n\n        tile_layer_paint: {\n            'line-opacity': 0.6,\n            'line-color': 'rgb(53, 175, 109)',\n            'line-width': 2\n        },\n        */\n\n        places_cluster: {\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            \"circle-color\": [\n                \"step\",\n                [\"get\", \"point_count\"],\n                \"#51bbd6\",\n                100,\n                \"#f1f075\",\n                750,\n                \"#f28cb1\"\n            ],\n            'circle-opacity': 0.2,\n            'circle-stroke-color': '#FFFFFF',\n            'circle-stroke-width': 2.4,\n            'circle-radius': {\n                property: 'point_count',\n                type: 'interval',\n                stops: [\n                    [0, 60],\n                    [100, 80],\n                    [750, 160]\n                ]\n            }\n        },\n\n        events_circle: {\n            // increase the radius of the circle as the zoom level and dbh value increases\n            'circle-radius': {\n                'base': 8,\n                'stops': [[8, 4], [18, 20]]\n            },\n            'circle-color': '#C650CC',\n            'circle-stroke-color': '#CC9423',\n            'circle-stroke-width': 0.4,\n            'circle-opacity': {\n                'stops': [[8, 0.01], [20, 0.6]]\n            },\n            'circle-translate': [-2, -2]\n        },\n\n        hidden_circles: {\n            //'visibility': 'none'\n            'circle-opacity': 0\n        },\n\n        places_circle: {\n            // increase the radius of the circle as the zoom level and dbh value increases\n            'circle-radius': [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"aggregate_rating\"],\n                1, 0.1,\n                2, 2,\n                10, 4\n            ],\n            'circle-color': \"#765382\",\n            'circle-stroke-color': '#FFFFFF',\n            'circle-stroke-width': 0.4,\n            'circle-stroke-opacity': 0.8,\n            'circle-opacity': {\n                'stops': [[8, 0.4], [20, 0.6]]\n            },\n            //'circle-translate': [-2, -2]\n        }\n    }\n}\n\n// Get HTML Position\nexport const getPosition = (options) => {\n\n    return new Promise(function (resolve, reject) {\n\n        const options = {\n            enableHighAccuracy: true,\n            timeout: 4000\n        }\n\n\n        if (!navigator.geolocation || !navigator.geolocation.getCurrentPosition) resolve(false)\n\n        function success(position) {\n            //console.log('got position: ', position)\n            resolve(position)\n        }\n\n        function error(err) {\n            //console.log('Error with location: ', err)\n            reject(false)\n            console.warn(`ERROR(${err.code}): ${err.message}`);\n        }\n\n        navigator.geolocation.getCurrentPosition(success, error, options)\n        //console.log('Getting position: ', navigator.geolocation, navigator.geolocation.getCurrentPosition, position)\n\n    })\n}\n\n// Return radius within bounds in miles\nexport const getRadius = (bounds) => {\n\n    let diameter = turf_distance(\n        [bounds[0], bounds[1]],\n        [bounds[2], bounds[3]],\n        { units: 'miles' }\n    )\n\n    let new_distance = diameter / 2\n\n    return new_distance\n}\n\nexport const getFeatureCollection = (geojson) => {\n    return featureCollection(geojson)\n}\n\nexport const getTruncatedFeatures = (features) => {\n    return turf_truncate(features, { precision: 6, coordinates: 2 })\n}\n\nexport const sortLocations = (locations, currentLocation) => {\n    //console.log('sortLocations ', locations, currentLocation);\n\n    let current = turf.point([currentLocation.longitude, currentLocation.latitude])\n\n    // Sort the list of places based on closness to the users\n    let sorted_locations = locations.sort((a, b) => {\n        const point_a = a.centerpoint\n            ? turf.point(a.centerpoint)\n            : turf.point([a.location.longitude, a.location.latitude])\n\n        const point_b = b.centerpoint\n            ? turf.point(b.centerpoint)\n            : turf.point([b.location.longitude, b.location.latitude])\n\n        a.distance = turf_distance(current, point_a)\n        b.distance = turf_distance(current, point_b)\n\n        if (a.distance > b.distance) {\n            return 1\n        } else {\n            return -1\n        }\n    })\n\n    return sorted_locations\n}\n\nexport const distanceBetweenLocations = (locationFirst, locationSecond, units = 'miles') => {\n    //console.log('distanceBetweenLocations ', locationFirst, locationSecond, units);\n    let first = turf.point([locationFirst.longitude, locationFirst.latitude])\n    let second = turf.point([locationSecond.longitude, locationSecond.latitude])\n\n    const distance = turf_distance(first, second)\n    return distance\n}\n\nexport const zoomToRadius = (zoom) => {\n\n    // Scale and interpolate radius to zoom siz\n    let zoom_to_radius_scale = scalePow(1)\n        .domain([8, 12, 13, 14, 16, 18]) // Zoom size\n        .range([40, 7, 3, 3.5, 1.5, 0.8]) // Scale of search radius\n\n    let new_zoom = zoom_to_radius_scale(zoom)\n\n    return new_zoom\n}\n"],"names":["getMax","items","attribute","let","max","forEach","value","item","geocodeAddress","async","key","address","city","params","URLSearchParams","error","data","message","endpoint","toString","response","axios","get","catch","console","log","results","length","place_id","id","placeResults","getPlaceDetails","place","source","location","geometry","coordinates","lng","lat","properties","name","aggregate_rating","rating","telephone","formatted_phone_number","tips","reviews","map","review","text","url","result","googlePlace","formatted_address","website","getPlaceSocial","query","cse_id","q","cx","getArea","turf_distance","bounds","units","getBounds","zoom","size","geoViewport","longitude","latitude","width","height","isPointInBounds","point","pointToCheck","turf","shape","getPolygon","booleanPointInPolygon","bboxPolygon","getClusters","places","cluster_size","collection","featureCollection","clustered","clustersDbscan","mutate","minPoints","clusterEach","cluster","clusterValue","center","turf_center","max_score","features","featureEach","currentFeature","featureIndex","fields","vibes_score","rhumb_distance","rhumbDistance","bearing","rhumbBearing","destination","rhumbDestination","offset","in_cluster","top_in_cluster","average_score","icon_size","push","sort","a","b","getDistance","point_a","point_b","getDistanceToPixels","window","left","bottom","right","unit","getFeaturesInBounds","feature","type","parsedBounds","flat","polygon","pointsWithinPolygon","getFeaturesFromSource","e","loaded","isSourceLoaded","sourceId","mapRef","current","getMap","toArray","source_features","querySourceFeatures","sourceLayer","center_point","viewport","placesFromTile","getDirections","waypoints","token","mode","Promise","resolve","reject","service","querystring","stringify","access_token","geometries","steps","start","end","start_end","String","join","fetch","then","json","res","loading","timedOut","getWaypoints","getBestRoute","bestRoute","directions","distance","getLocationFromPoint","centerpoint","getPointFromLocation","getMapStyles","categories","going_out","lens","fill-color","fill-opacity","fill-outline-color","geolocateStyle","position","top","navigateStyle","top_marker","icon-size","marker_layout","icon-image","icon-allow-overlap","icon-ignore-placement","symbol-sort-key","text-size","text-field","text-anchor","text-allow-overlap","text-ignore-placement","text-line-height","text-justify","text-variable-anchor","text-font","text-max-width","text-radial-offset","visibility","marker_paint","text-color","icon-color","text-halo-color","text-halo-width","route_layout","line-join","line-cap","route_paint","line-color","line-width","line-opacity","top_pick_layout","text-letter-spacing","neighborhood_layout","base","stops","text-transform","text-padding","neighborhood_paint","top_pick_paint","top_vibe_layout","places_heatmap","heatmap-radius","heatmap-opacity","heatmap-intensity","heatmap-weight","heatmap-color","places_cluster","circle-color","circle-opacity","circle-stroke-color","circle-stroke-width","circle-radius","property","events_circle","circle-translate","hidden_circles","places_circle","circle-stroke-opacity","getPosition","navigator","geolocation","getCurrentPosition","err","warn","code","enableHighAccuracy","timeout","getRadius","getFeatureCollection","geojson","getTruncatedFeatures","turf_truncate","precision","sortLocations","locations","currentLocation","distanceBetweenLocations","locationFirst","locationSecond","first","second","zoomToRadius","zoom_to_radius_scale","scalePow","domain","range"],"mappings":"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"}