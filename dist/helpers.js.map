{"version":3,"file":"helpers.js","sources":["../utils/helpers.js"],"sourcesContent":["import Axios from \"axios\"\nimport axiosRetry from 'axios-retry'\n\nimport querystring from 'querystring'\n\naxiosRetry(Axios, {\n  retries: 3,\n  retryDelay: axiosRetry.exponentialDelay,\n  onRetry: (count, err, config) => {\n    console.log('Axios retrying: ', count, err, config)\n  }\n})\n\n// same object, but with updated typings.\n// TODO: roll back caching until CORS is fixed everywhere.\n//import { setupCache } from 'axios-cache-interceptor'\n//const axios = setupCache(Axios);\n\nconst axios = Axios\n\nimport dayjs from 'dayjs'\ndayjs.extend(isBetween)\nimport dayjsRecur from 'dayjs-recur'\ndayjs.extend(dayjsRecur)\nimport isBetween from 'dayjs/plugin/isBetween'\n\nimport LinearScale from 'linear-scale'\nimport truncate from 'truncate'\n\nimport * as turf from '@turf/helpers'\nimport turf_distance from '@turf/distance'\nimport turf_boolean from '@turf/boolean-point-in-polygon'\n\nimport * as constants from '../constants/constants.js'\nimport cities from '../constants/cities.json'\nimport neighborhoods from '../dist/neighborhoods.json'\nimport badges from '../dist/badges.json'\n\nimport { getLocationFromPoint, sortLocations, distanceBetweenLocations } from './map'\nimport { getRelatedVibes, getCategoriesByLevel } from './vibes'\nimport { getGroups } from './wordpress'\n\nconst jsonpack = require('jsonpack')\nlet activityCategories = {}\nlet categories_flat = []\n\n\n// Keep track of which API endpoint domain we are using\nexport const getAPIDomain = (mode = null) => {\n  // Use the mode passed in, or the NODE_ENV\n  const env_mode = typeof (process) != 'undefined' && process.env.API_ENV\n  const current_mode = mode\n    ? mode\n    : env_mode\n      ? env_mode\n      : 'production'\n\n  const url_production = 'https://api.vibemap.com'\n  const url_staging = 'https://staging.api.vibemap.com'\n  const url_dev = 'http://localhost:9000'\n\n  const domain = current_mode === 'production'\n    ? url_production\n    : current_mode === 'staging'\n      ? url_staging\n      : url_dev\n\n  return domain\n}\n\nconst api_domain = getAPIDomain()\nconst api_version = 'v0.3'\nconst useSearchAPI = true\nconst useSearchAPIEvents = false\n\nconst ApiUrl = `${api_domain}/${api_version}/`\n\n// Filters a list of objects\n// Similar to .filter method of array\nexport const filterList = (\n  list = [{ test: 'test', value: 'foo' }, { test: 'test', value: 'bar' }],\n  searchTerm = 'food', key = 'value'\n) => {\n  // Generalize the Semantic UI search implementation\n  const re = new RegExp(searchTerm.replace(/[-[\\]{}()*+!<=:?.\\/\\\\^$|#\\s,]/g, '\\\\$&'), 'i')\n\n  const isMatch = (result) => re.test(result[key])\n\n  const results = list.filter(item => isMatch(item))\n\n  return results\n}\n\nexport const getRandomItem = (list) => {\n  // Get random index value\n  const randomIndex = Math.floor(Math.random() * list.length)\n\n  // Get random item\n  const item = list[randomIndex]\n\n  return item\n}\n\n// TODO: Option to encode / decode\nexport const encodeCardIndex = (row, column) => {\n  // Encode row / column into a decimal for sorting.\n  const index = row + column / 10\n\n  return index\n}\n\n// Counts the number of matches between the two lists and return and integer\nexport const matchLists = (listA, listB) => {\n  let matches = 0\n\n  if (listA.length > 0 && listB.length > 0) {\n    matches = listA.filter((word) => {\n      return listB.includes(word)\n    }).length\n  }\n\n  return matches\n}\n\n// Give a score based on the vibes position in the list.\nexport const rankVibes = (listA, listB) => {\n  let rankings = []\n\n  rankings = listA.map((word) => {\n    let score = 0\n\n    if (listB.includes(word)) {\n      score = listB.length - listB.indexOf(word)\n    }\n\n    return score\n  })\n\n  const average = rankings.reduce((a, b) => a + b, 0) / listB.length\n\n  return average\n}\n\nexport const sortByKey = (a, b) => {\n  console.log('sortByKey (a, b)', a, b)\n  return a\n}\n\nexport const sortByPopularity = (a, b) => {\n  // Sorted by Monthly Search Volumne (MSV)\n  // Handle null or empty msv\n  const aPop = parseInt(a.details.msv ? a.details.msv : 2)\n  const bPop = parseInt(b.details.msv ? b.details.msv : 2)\n\n  return bPop - aPop\n}\n\ntry {\n  const activityCategoriesPacked = require('../dist/activityCategories.zip.json')\n  activityCategories = {\n    activityCategories: jsonpack.unpack(activityCategoriesPacked)\n  }\n\n  categories_flat = activityCategories.activityCategories\n    .sort(sortByPopularity)\n    .map(category => category.name.toLowerCase())\n\n} catch (error) {\n  console.log('Error with packed activityCategories ', error)\n}\n\nexport const sortByArray = (sortedList, sortingArr) => {\n  return sortedList.sort((a, b) => {\n    return sortingArr.indexOf(a) - sortingArr.indexOf(b)\n  })\n}\n\nexport const isClosedToday = (dailyHours) => {\n  return dailyHours.opens === '00:00:00' && dailyHours.closes === '00:00:00'\n}\n\nexport const displayHours = (hours, dayFormat = 'dd') => {\n  let openHours = isOpen(hours)\n  let hasHours = false\n\n  const weeklyHours = hours.find(({ day_of_week }) => day_of_week === 8)\n\n  if (openHours.openEveryday) {\n    let times = []\n    const time =\n      dayjs(openHours.opens).format('ha') +\n      '-' +\n      dayjs(openHours.closes).format('ha')\n    times.push(time)\n\n    let popularFound = hours.find((day) => day.name == 'POPULAR')\n    console.log('Popular at: ', popularFound)\n\n    return times\n  }\n\n  let i = 0\n  let orderedHours = []\n\n  // Check every day of the week.\n  while (i < 7) {\n    // Get Label\n\n    let dayFound = hours.find((day) => day.day_of_week == i)\n    let popularFound = hours.find(\n      (day) => day.day_of_week == i && day.name == 'POPULAR'\n    )\n\n    // TODO: Handle popular vs normal\n    //console.log('Found day and popular times: ', dayFound, popularFound)\n\n    let isClosed = false\n\n    if (dayFound !== undefined) {\n      isClosed = isClosedToday(dayFound)\n\n      // We have some hours for the place\n      if (!isClosed) hasHours = true\n      //console.log('Day has hours: ', i, dayFound, popularFound, hasHours)\n    }\n\n    // If found and not closed\n    if (dayFound === undefined || isClosed) {\n      //const displayHours = helpers.displayHours(dayFound)\n      // Will with daily hours if available\n      if (!isClosed && weeklyHours !== undefined) {\n        // Set for current day\n        let time = Object.assign({}, weeklyHours)\n        time.day_of_week = i\n        orderedHours.push(time)\n        // Include closed days as closed\n      } else {\n        orderedHours.push({ day_of_week: i, closed: true })\n      }\n    } else {\n      dayFound.closed = false\n      orderedHours.push(dayFound)\n    }\n    i++\n  }\n\n  // TODO: Add patterns for nicer formating.\n  // TODO: Handle localization and React templates\n  let formattedHours = orderedHours.map((dailyHours) => {\n    //console.log('formattedHours for: ', dailyHours)\n    // Shift days by 1; Monday = 1; Sunday = 0\n    const day = (dailyHours.day_of_week + 1) % 7\n\n    if (dailyHours.closed === true) {\n      return dayjs().day(day).format(dayFormat) + ': ' + 'Closed'\n    } else {\n      const opens = dailyHours.opens.split(':')\n      const closes = dailyHours.closes.split(':')\n\n      const time =\n        dayjs().day(day).format(dayFormat) +\n        ': ' +\n        dayjs().hour(opens[0]).minute(opens[1]).format('ha') +\n        '-' +\n        dayjs().hour(closes[0]).minute(closes[1]).format('ha')\n\n      return time\n    }\n  })\n\n  return formattedHours\n}\n\nexport const isOpen = (hours, time = dayjs()) => {\n  const day = time.day()\n  const date = time.format('YYYY-MM-DD')\n  const hour = time.hour()\n\n  if (!hours) return { openNow: false, openToday: false, isPopular: false }\n\n  let dayFound = hours.find(({ day_of_week }) => day_of_week === day)\n\n  // TODO: not true if it's closed one day\n  const hasDailyHours = hours.find(({ day_of_week }) => day_of_week === 8)\n\n  const daysClosed = hours.filter((day) => isClosedToday(day))\n\n  const openEveryday = hasDailyHours !== undefined && daysClosed.length == 0\n\n  // If open everyday and no specific hours for current day\n  if (openEveryday !== undefined && dayFound === undefined) {\n    dayFound = hasDailyHours\n  }\n\n  if (dayFound) {\n    const opens = dayjs(date + ' ' + dayFound.opens)\n    const closes = dayjs(date + ' ' + dayFound.closes)\n\n    // Return if open and if it's a popular time\n    const openNow = time.isBetween(opens, closes)\n    const isPopular = openNow && dayFound.name === 'POPULAR'\n    const hoursToday = opens.format('ha') + ' - ' + closes.format('ha')\n\n    return {\n      openNow: openNow,\n      openToday: true,\n      openEveryday: openEveryday,\n      opens: opens,\n      closes: closes,\n      isPopular: isPopular,\n    }\n  } else {\n    return {\n      openNow: false,\n      openToday: false,\n      openEveryday: false,\n      isPopular: false,\n    }\n  }\n}\n\nexport const parseDateTime = (datetime) => {\n  const date = datetime ? dayjs(datetime) : null\n  return date\n}\n\nexport const formatDateTime = (\n  datetime,\n  formatHtml = false,\n  showDayOfWeek = false\n) => {\n  if (datetime) {\n    if (typeof (datetime) == 'string') datetime = parseDateTime(datetime)\n\n    const month = datetime.format('MMM')\n    const day = datetime.format('D')\n    const weekday = datetime.format('ddd')\n    const hour = datetime.format('ha')\n    const dateFormated = `${showDayOfWeek ? weekday : null} ${month} ${day} ${hour}`\n\n    return dateFormated\n  } else {\n    return null\n  }\n}\n\nexport const getCardOptions = (block) => {\n  let postData = block.singCards.posts\n\n  let {\n    categoryQuery,\n    distanceQuery,\n    geoQuery,\n    placeType,\n    searchQuery,\n    vibeQuery } = postData[0]\n\n  // If a vibe override query is present\n  if (block.overrideQuery && block.overrideQuery.vibe) vibeQuery = block.overrideQuery.vibe\n\n  // Use city as a back up\n  if (block.overrideQuery && block.overrideQuery.cities && block.overrideQuery.cities.length > 0) {\n    const selectedCity = cities.filter(result => result.slug === block.overrideQuery.cities[0])\n\n    // TODO: Update this programatically from Wordpress\n    const cityRadius = 7\n    geoQuery = geoQuery ? geoQuery : selectedCity[0].location\n    distanceQuery = distanceQuery ? distanceQuery : cityRadius\n  }\n\n  if (block.overrideQuery && block.overrideQuery.location) {\n    geoQuery = block.overrideQuery.location\n\n    distanceQuery = block.overrideQuery.distance ? block.overrideQuery.distance : distanceQuery\n  }\n\n  // If no city or override are passed, make Oakland default\n  if (!geoQuery) {\n    const firstCity = cities.filter(result => result.slug === 'oakland')\n    geoQuery = firstCity[0].location\n  }\n\n  if (typeof vibeQuery === 'string') vibeQuery = vibeQuery.replace(/\\s/g, '').split(\",\") // Cast comma-separated list to array\n\n  // Map all the vibe slug to a list that includes related vibes.\n  const vibesFromCategories = vibeQuery ? vibeQuery.map(vibe => typeof (vibe) === 'string' ? vibe : vibe.slug) : []\n\n  // TODO: Move get relateed vibes to the backend or front end, not here.\n  //const allVibes = vibes.getRelatedVibes(vibesFromCategories)\n\n  let cardOptions = {\n    category: categoryQuery,\n    distance: distanceQuery,\n    point: geoQuery.longitude + ',' + geoQuery.latitude,\n    ordering: 'vibe',\n    search: searchQuery,\n    vibes: vibesFromCategories\n  }\n\n  return cardOptions\n\n}\n\nexport const getAPIParams = (\n  options,\n  per_page = 150,\n  includeRelated = false,\n  useElastic = useSearchAPI\n) => {\n  let { activity, distance, point, vibes } = options\n  let params = Object.assign({}, options)\n\n  let distanceInMeters = 1\n  if (distance > 0)\n    distanceInMeters = Math.round(distance * constants.METERS_PER_MILE)\n\n  // API currently doesn't support other options\n  // However, the sorting algorithm, will use them\n  params['ordering'] = options.ordering\n    ? options.ordering\n    : '-aggregate_rating'\n\n  // TODO: Load more points at greater distances?\n  params['per_page'] = per_page\n\n\n  const coords = point.split(',')\n  const lat = coords[1]\n  const lon = coords[0]\n\n  if (useElastic) {\n    if (params.activity) {\n      params['categories'] = activity\n    }\n\n    if (params.tags) {\n      params['tags.raw__in'] = tags\n      delete params['tags']\n    }\n\n    if (params.vibes) {\n      params[':vibes.raw__in'] = vibes\n      delete params['vibes']\n    }\n\n    if (params.category) {\n      params['categories'] = typeof (params.category) === 'string'\n        ? params.category.toLowerCase().split()\n        : params.category\n    }\n\n    if (params.distance) {\n      params['location__geo_distance'] = `${distanceInMeters}m__${lat}__${lon}`\n      delete params['distance']\n    }\n\n    if (params.search && params.search.length > 0) {\n      // FIXME: Make sure searchess ues the right ordering method in Elastic\n      // FIXME: Check if search term matches any tags or categories with a high thresdhold\n      let example_tag = 'east bay open studios'\n      if (example_tag.includes(params.search)) {\n        params.editorial_category = \"EastBayOpenStudios\"\n      }\n      delete params['ordering']\n      delete params[':vibes.raw__in']\n    }\n\n    if (params.editorial_category) {\n      const term = params.editorial_category\n      params['editorial_categories.raw__wildcard'] = `*${term}*`\n      delete params['editorial_category']\n    }\n\n    params['is_chain'] = options.is_chain ? options.is_chain : false\n    params['is_closed'] = options.is_closed ? options.is_closed : false\n    params['is_destination'] = options.is_destination ? options.is_destination : false\n\n    // TODO: there's probably an easier way to set these rules on the backend.\n    if (params.city) {\n      params['city.raw__contains'] = params.city\n      delete params['city']\n    }\n\n    if (params.per_page) {\n      params['page_size'] = params.per_page\n      delete params['per_page']\n    }\n  }\n\n  // Rename args\n  if (activity !== 'all' && activity !== null) params['category'] = activity\n  params['dist'] = distanceInMeters\n  delete params['activity']\n  delete params['distance']\n  delete params['bounds']\n\n  // Cleanup empty args\n  if (params.city == null) delete params['city']\n  if (params.category == null || params.category == 'all' || params.category.length == 0) delete params['category']\n  if (params.editorial_category == null) delete params['editorial_category']\n  if (params.search == null) delete params['search']\n  if (params.vibes == null || params.vibes.length == 0) delete params['vibes']\n  if (includeRelated == false) delete params['relatedVibes']\n  //console.log('distanceInMeters', distanceInMeters, params['dist'])\n\n  return params\n}\n\n// Return all matching Vibemap categories\nexport const getCategoryMatch = (categories = ['all']) => {\n  const all_categories = activityCategories.activityCategories.map(\n    (category) => category.slug\n  )\n\n  let matches = []\n  /* TODO: use a combination of filter & map */\n  categories.map((category) => {\n    if (all_categories.includes(category)) {\n      matches.push(category)\n    }\n    return true\n  })\n\n  return matches\n}\n\n// Parse all variety of social links and return a consistent, valid url\nexport const getFullLink = (link, type = 'instagram') => {\n  const domains = {\n    instagram: 'https://instagram.com/',\n    twitter: 'https://twitter.com/',\n    facebook: 'https://facebook.com/',\n  }\n\n  // Handle things that aren't valid string handles\n  // TODO: add unit tests for link = null; link = '' and other cases\n  if (link === null || link === '') return null\n\n  const parse_url = url.parse(link)\n\n  // TODO: Just use the native URL methods:\n  let url = new URL(link)\n  //const path = url.pathname\n\n\n  // Only the path handle\n  const path = parse_url.path.replace('/', '')\n\n  // Combine domain and handle\n  const full_link = domains[type] + path\n\n  return full_link\n}\n\n// Give a city object return it's center coordinates as an array\nexport const geLocationFromCity = (city) => {\n  // Handles both the object form the CMS and vibemap-constants\n  // TODO: Consolidate to just vibemap-constants\n  const centerPoint = city.cityDetails\n    ? city.cityDetails.placemarker\n    : city.location\n      ? city.location\n      : null\n\n  return centerPoint\n}\n\nexport const getMax = (items, attribute) => {\n  let max = 0\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value > max) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nexport const getMin = (items, attribute) => {\n  let min = 100\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value < min) {\n      min = value\n    }\n  })\n\n  return min\n}\n\n// Adapted from https://gist.github.com/James1x0/8443042\nexport const getTimeOfDay = (time) => {\n  var time_of_day = null //return g\n\n  //if we can't find a valid or filled moment, we return.\n  if (!time || !time.isValid()) {\n    return\n  }\n\n  var split_afternoon = 12 // 24hr time to split the afternoon\n  var split_evening = 17 // 24hr time to split the evening\n  var currentHour = parseFloat(time.format('HH'))\n\n  if (currentHour >= split_afternoon && currentHour <= split_evening) {\n    time_of_day = 'afternoon'\n  } else if (currentHour >= split_evening) {\n    time_of_day = 'evening'\n  } else {\n    time_of_day = 'morning'\n  }\n\n  return time_of_day\n}\n\n\nconst getTopLocations = (places, location_type = 'city', flat = false) => {\n  let top_locations = {};\n\n  places.map(place => {\n    // Only use city name, not state or country\n    const location = place.properties[location_type]\n\n    if (location != null && location != 'null') {\n      const name = location.split(',')[0]\n\n      if (top_locations.hasOwnProperty(location)) {\n        top_locations[name] += 1;\n      } else {\n        top_locations[name] = 1;\n      }\n    }\n\n    return null\n  });\n\n  var sortable = [];\n  for (var location in top_locations) {\n    sortable.push([location, top_locations[location]]);\n  }\n\n  let top_locations_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  });\n\n  const locations = flat\n    ? top_locations_sorted.map((location) => location[0])\n    : top_locations_sorted\n  return locations\n}\n\n// TODO: consolidate with getTopVibes; can be generic for any property with array values\nexport const getTopTags = (places, flat = false) => {\n  let top_tags = {}\n\n  places.map((place) => {\n    place.properties.tags.map(tag => {\n      if (top_tags.hasOwnProperty(tag)) {\n        top_tags[tag] += 1\n      } else {\n        top_tags[tag] = 1\n      }\n      return null\n    })\n    return null\n  })\n\n  var sortable = []\n  for (var tag in top_tags) {\n    sortable.push([tag, top_tags[tag]])\n  }\n\n  let top_tags_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  })\n\n  const tags = flat ? top_tags_sorted.map(tag => tag[0]) : top_tags_sorted\n  return tags\n}\n\n\nexport const getTopVibes = (places, flat = false) => {\n  let top_vibes = {}\n\n  places.map((place) => {\n    place.properties.vibes.map((vibe) => {\n      if (top_vibes.hasOwnProperty(vibe)) {\n        top_vibes[vibe] += 1\n      } else {\n        top_vibes[vibe] = 1\n      }\n      return null\n    })\n    return null\n  })\n\n  var sortable = []\n  for (var vibe in top_vibes) {\n    sortable.push([vibe, top_vibes[vibe]])\n  }\n\n  let top_vibes_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  })\n\n  const vibes = flat ? top_vibes_sorted.map((vibe) => vibe[0]) : top_vibes_sorted\n\n  return vibes\n}\n\nexport const getTopCategories = (places, attribute = 'categories') => {\n  let top_categories = {};\n\n  places.map((place) => {\n    place.properties[attribute].map((item) => {\n      if (top_categories.hasOwnProperty(item)) {\n        top_categories[item] += 1;\n      } else {\n        top_categories[item] = 1;\n      }\n      return null\n    });\n    return null\n  });\n\n  var sortable = [];\n  for (var item in top_categories) {\n    sortable.push([item, top_categories[item]]);\n  }\n\n  let top_categories_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  });\n\n  return top_categories_sorted\n}\n\nexport const getWaveFromVibe = (vibe) => {\n  switch (vibe) {\n    case 'buzzing':\n      return 'high'\n    default:\n      return 'medium'\n  }\n\n  //console.log('Get wave level for vibe: ', vibe, waveLevel)\n\n  return waveLevel\n}\n\nexport const graphToEvents = (edges = []) => {\n  const events = edges.map(edge => {\n    const groupEvent = edge.node\n    const details = groupEvent.groupDetails\n\n    const name = details.name\n    const link = details.link\n    const slug = groupEvent.slug\n    const description = details.description\n    // TODO: Handle multiple images\n    const image = details.image\n      ? details.image.url\n      : null\n    const images = [{\n      url: image,\n      original: image\n    }]\n    const location = details.map\n    const price = details.price ?\n      details.price :\n      `free`\n\n    const vibes = details.vibes ?\n      details.vibes.map(vibe => vibe.slug) : []\n\n    const recurring = details.recurring\n    const recurrence = details.recurrence\n    const which = details.which\n    const day = details.day.value\n\n    const startTime = details.startTime ?\n      details.startTime :\n      `00:00`\n    const endTime = details.startTime ?\n      details.endTime :\n      `00:00`\n\n    const recurRule = nextDateFromRecurring(recurrence, day, which)\n\n    const nextStartTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, startTime))\n\n    const nextEndTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, endTime))\n\n    const event = {\n      id: slug,\n      title: name,\n      geometry: {\n        type: \"Point\",\n        coordinates: [-122.26747099999956, 37.81396520000001]\n      },\n      dateTime: nextStartTime,\n      image: images,\n      card_type: 'event',\n      properties: {\n        name: name,\n        title: name,\n        url: link,\n        address: location && location.streetAddress,\n        categories: [],\n        city: details.cities && details.cities[0].slug,\n        description: description,\n        is_online: false,\n        images: [],\n        hotspots_place: location,\n        location: location,\n        start_date: nextStartTime,\n        end_date: nextEndTime,\n        vibemap_images: images,\n        likes: 10,\n        price: price,\n        recurs: true,\n        vibes: vibes\n      }\n    }\n\n    return event\n  })\n\n  return events\n}\n\nexport const groupsToEvents = (groups = []) => {\n  const events = groups.map(groupEvent => {\n    //const groupEvent = edge.node\n    const details = groupEvent.acf\n\n    const name = details.name\n    const link = details.link\n    const slug = groupEvent.slug\n    const description = details.description\n    // TODO: Handle multiple images\n    const image = details.image && details.image.url\n    const images = image\n      ? [{\n        url: image,\n        original: image\n      }]\n      : []\n\n    const location = details.map\n    const price = details.price ?\n      details.price :\n      `free`\n\n    const vibes = details.vibes ?\n      details.vibes.map(vibe => vibe.slug) : []\n\n    const recurring = details.recurring\n    const recurrence = details.recurrence\n    const which = details.which\n    const day = details.day && details.day.label\n      ? details.day.label\n      : `sunday`\n\n    const startTime = details.start_time ?\n      details.start_time :\n      `00:00`\n    const endTime = details.end_time ?\n      details.end_time :\n      `00:00`\n\n    const recurRule = nextDateFromRecurring(recurrence, day, which)\n\n    const nextStartTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, startTime))\n\n    const nextEndTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, endTime))\n\n    const event = {\n      id: slug,\n      title: name,\n      geometry: {\n        type: \"Point\",\n        coordinates: [-122.26747099999956, 37.81396520000001]\n      },\n      dateTime: nextStartTime.toISOString(),\n      image: images,\n      card_type: 'event',\n      properties: {\n        name: name,\n        title: name,\n        url: link,\n        address: location && location.streetAddress,\n        categories: [],\n        city: details.cities && details.cities[0].slug,\n        description: description,\n        is_online: false,\n        images: images,\n        hotspots_place: location,\n        location: location,\n        start_date: nextStartTime.toISOString(),\n        end_date: nextEndTime.toISOString(),\n        vibemap_images: images,\n        likes: 10,\n        price: price,\n        recurs: true,\n        vibes: vibes\n      }\n    }\n\n    return event\n  })\n\n  return events\n}\n\n// This function is no longer utilized. Linear scale from 0 to 10\nexport const normalize = (val, min, max) => {\n  return ((val - min) / (max - min)) * 10\n}\n\n/* New flexible linear scaling function. Using d3.scaleLinear, a value (val) between\nmin and max is scaled appropriately to value between scale_low and scale_high\n*/\nexport const normalize_all = (val = 500, min = 1, max = 100, scale_low = 1, scale_high = 10) => {\n\n  const scale = LinearScale().domain([min, max]).range([scale_low, scale_high])\n  //console.log(`linear-scale result `, scale(val))\n\n  return scale(val)\n}\n\n// TODO Function for scaling icon. Currently bug (likely in clustering) where certain icon's become very small\nexport const scaleIconSize = (score = 5, min = 1, max = 100) => {\n  const minSize = 1\n  const maxSize = 5\n\n  // TODO: Test and replace\n  //const d3_scale = scaleLinear().domain([min, max]).range([1, 5])\n\n  const scale = LinearScale()\n    .domain([min, max])\n    .range([minSize, maxSize])\n\n  const iconSize = scale(score)\n\n  return iconSize\n}\n\nexport const scaleMarker = (score = 50, min = 0, max = 100, zoom = 14) => {\n  // TODO: Hack to catch empty/nan scores\n  if (isNaN(score)) score = 3.5\n\n  const marker_scale = LinearScale()\n    .domain([8, 20])\n    .range([10, 30])\n\n\n  let base_marker = marker_scale(zoom)\n  let max_marker = base_marker * 3\n\n  let scale = LinearScale()\n    .domain([0, max])\n    .range([base_marker, max_marker])\n\n  let scaled_size = Math.round(scale(score))\n\n  return scaled_size\n}\n\n// Maps the relative density of place to a known range for Vibemap's cities\nexport const scaleDensityArea = (density = 10, area = 100) => {\n  // TODO: Make these contants?\n  let density_scale = LinearScale()\n    .domain([1, 60, 1000])\n    .range([0, 0.8, 1])\n\n  let relative_density = density_scale(density)\n\n  return relative_density\n}\n\nexport const scaleDensityBonus = (relative_density) => {\n  let inverted_scale = LinearScale()\n    .domain([0, 1])\n    .range([constants.HEATMAP_INTENSITY * 2, constants.HEATMAP_INTENSITY])\n\n  const withBonus = inverted_scale(relative_density)\n  return withBonus\n}\n\nexport const scaleScore = (score = 2) => {\n  let scale = LinearScale()\n    .domain([0, 5])\n    .range([60, 100])\n\n  let percentage = Math.round(scale(score))\n\n  return percentage\n}\n\nexport const scaleSelectedMarker = (zoom) => {\n  // Scale em size of svg marker to zoom level\n  let scale = LinearScale()\n    .domain([8, 12, 20]) // Zoom size\n    .range([0.1, 1.2, 4]) // Scale of marker size\n\n  let scaled_size = Math.round(scale(zoom))\n\n  return scaled_size\n}\n\nexport const getEventOptions = (\n  city = 'oakland',\n  date_range = 'quarter',\n  distance = 10,\n  category = null,\n  vibes = [],\n  search,\n  tags = []\n) => {\n  const locations = cities.concat(neighborhoods)\n  const selectedLocation = locations.filter(result => result.slug === city)\n  // FIXME: Why is the location sometimes missing\n  const location = selectedLocation ? selectedLocation[0].location : cities[0]\n\n  const today = dayjs()\n  const dayOfWeek = today.day() + 1\n\n  let day_start = today.startOf('day')\n\n  let startOffset = 0\n  let endOffset = 0\n\n  switch (date_range) {\n    case 'day':\n      endOffset = 1\n      break;\n\n    case 'weekend':\n      endOffset = 7 - dayOfWeek\n      break;\n\n    case 'next_week':\n      startOffset = 8 - dayOfWeek\n      endOffset = 7\n      break;\n\n    case 'month':\n      const monthEnd = today.endOf('month')\n      endOffset = monthEnd.diff(today, 'day')\n      break;\n\n    case 'quarter':\n      endOffset = 90\n      break;\n  }\n\n  let date_range_start = today.add(startOffset, 'day').startOf('day')\n  let date_range_end = today.add(endOffset, 'day').endOf('day') //  TODO Plus range\n  //console.log('DEBUG: date_range_start, date_range_end: ', date_range, date_range_start.toString(), date_range_end.format(\"YYYY-MM-DD HH:MM\"));\n\n  let options = {\n    activity: category,\n    category: category,\n    distance: distance,\n    point: location.longitude + ',' + location.latitude,\n    ordering: '-score_combined',\n    start_date_after: date_range_start.format(\"YYYY-MM-DD HH:MM\"),\n    end_date_before: date_range_end.format(\"YYYY-MM-DD HH:MM\"),\n    search: search,\n    tags: tags,\n    vibes: vibes\n  }\n\n  console.log('DEBUG: getEventOptions: ', options);\n\n  // Don't pass empty/null params\n  if (options.category == null || options.category == 'all' || options.category.length == 0) delete options['category']\n  if (options.search == null) delete options['search']\n  if (options.tags == null || options.tags.length == 0) delete options['tags']\n  if (options.vibes == null || options.vibes.length == 0) delete options['vibes']\n\n  return options\n}\n\nexport const fetchEvents = async (\n  // Defaults for testing\n  options = {\n    distance: 20,\n    point: `-122.269994,37.806507`\n  },\n  activitySearch = false,\n  recurringSearch = false\n) => {\n  //console.log('fetchEvents: activitySearch, recurringSearch', activitySearch, recurringSearch);\n\n  let {\n    activity,\n    bounds,\n    category,\n    days,\n    distance,\n    ordering,\n    point,\n    search,\n    time,\n    vibes,\n  } = options\n\n  let centerPoint = point.split(',').map((value) => parseFloat(value))\n  let currentLocation = getLocationFromPoint(centerPoint)\n  let distanceInMeters = distance * constants.METERS_PER_MILE\n\n  let day_start = dayjs().startOf('day').format('YYYY-MM-DD HH:MM')\n  let day_end = dayjs().add(days, 'days').format('YYYY-MM-DD HH:MM')\n\n  if (activitySearch && category) {\n    options.search = `${category ? category : ''} ${search ? search : ''}`\n  }\n\n  const nearestCities = sortLocations(cities, currentLocation)\n  const city = nearestCities && nearestCities.length > 0\n    ? nearestCities[0].name\n    : null\n\n  const params = module.exports.getAPIParams(options, undefined, undefined, useSearchAPIEvents)\n  //const searchParams = new URLSearchParams(params)\n  //let query = searchParams.toString()\n  let query = querystring.stringify(params)\n\n  const apiEndpoint = useSearchAPI && useSearchAPIEvents\n    ? ApiUrl + 'search/events'\n    : ApiUrl + 'events/'\n\n  console.log('DEBUG Search Events API endpoint: ', useSearchAPI, useSearchAPIEvents);\n\n  const source = axios.CancelToken.source()\n\n  let response = await axios.get(`${apiEndpoint}?${query}`, {\n    cancelToken: source.token,\n  }).catch(function (error) {\n    // handle error\n    console.log('Axios error ', error.response && error.response.statusText)\n\n    return {\n      data: [],\n      count: 0,\n      top_vibes: null,\n      loading: false,\n      timedOut: false\n    }\n  })\n\n  // TODO: How to filter by location and category / vibe\n  if (recurringSearch) {\n    const groups = await getGroups({ city: city ? city : '' })\n    const recurringGroupEvents = groupsToEvents(groups.data)\n\n    response.data.results.features = recurringGroupEvents.concat(response.data.results.features)\n  }\n\n  return response\n}\n\nconst nextDateFromRecurring = (...[\n  recurrence,\n  day,\n  which\n]) => {\n  const date = dayjs() // .startOf('month')\n  const ordinals = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"]\n  const whichDay = ordinals.indexOf(which)\n  const weekOfMonth = whichDay > 0 ? whichDay : 0\n\n  // TODO: Handle daily, quarterly, yearly\n  // And pass this same util to the details page\n  const recurRule = recurrence == `monthly` ?\n    date.recur()\n      .every(day).daysOfWeek() // By day name\n      .every([weekOfMonth]).weeksOfMonthByDay() // By which week of the month\n    :\n    date.recur()\n      .every(day).daysOfWeek() // Same day every week\n\n  return recurRule\n}\n\nexport const fetchPlacesDetails = async (id, type = 'place') => {\n  const source = axios.CancelToken.source()\n  let apiEndpoint\n  let category = \"\"\n\n  if (type == \"event\") {\n    apiEndpoint = `${ApiUrl}events/`\n    category = `Event`\n  }\n\n  if (type == \"place\") {\n    apiEndpoint = `${ApiUrl}places/`\n    category = `Place`\n  }\n\n  if (apiEndpoint) {\n    const response = await axios.get(`${apiEndpoint}${id}`, {\n      cancelToken: source.token,\n    }).catch(function (error) {\n      // handle error\n      console.log('axios error ', error && error.statusText);\n      return null\n    })\n\n    let subcategory = category\n\n    return response\n  }\n}\n\n// Fetch Places from API with query params including\n// - categories\n// - vibes\n// - search\nexport const fetchPlacePicks = async (\n  options = {\n    distance: 5,\n    point: '-123.1058197,49.2801149',\n    ordering: '-score_combined',\n    tags: [],\n    vibes: ['chill'],\n    preferredVibes: [],\n    relatedVibes: [] // TODO: Separate query by * score by\n  }\n) => {\n  let {\n    activity,\n    bounds,\n    category,\n    days,\n    distance,\n    is_chain = false,\n    is_closed = false,\n    is_destination = false,\n    ordering,\n    per_page,\n    point,\n    search,\n    time,\n    tags,\n    vibes,\n    preferredVibes,\n    relatedVibes,\n    useNearest = false,\n    useBoundaries = false\n  } = options\n\n  let distanceInMeters = 1\n  if (distance > 0) distanceInMeters = distance * constants.METERS_PER_MILE\n  if (activity === 'all') activity = null\n\n  const scoreBy = ['aggregate_rating', 'vibes', 'distance', 'offers', 'hours']\n  const numOfPlaces = per_page ? per_page : 100\n  const hasVibes = vibes && vibes.length > 0\n\n  let centerPoint = point.split(',').map((value) => parseFloat(value))\n  let currentLocation = getLocationFromPoint(centerPoint)\n  const nearestCities = sortLocations(cities, currentLocation)\n  const distanceFrom = distanceBetweenLocations(nearestCities[0].location, currentLocation)\n\n  // Use city if nearby, for better caching\n  if (useNearest && distanceFrom < 20) {\n    const city = nearestCities[0]\n    options.point = city.centerpoint.join(',')\n  }\n\n  const apiEndpoint = useSearchAPI\n    ? ApiUrl + 'search/places'\n    : ApiUrl + 'places/'\n\n  // Cancel previous request\n  const source = axios.CancelToken.source()\n  let response = {}\n\n  const getPlaces = async (options) => {\n    const params = getAPIParams(options, numOfPlaces)\n    let query = querystring.stringify(params)\n    console.log(`Places search query is `, `${apiEndpoint}?${query}`);\n\n    response = await axios.get(`${apiEndpoint}?${query}`, {\n      cancelToken: source.token,\n    }).catch(function (error) {\n      // handle error\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return {\n        data: [],\n        count: 0,\n        query: '?' + query,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n    console.log('Got response ', response);\n    return response\n  }\n\n  response = await getPlaces(options)\n\n  const count = response.data.count\n\n  // FIXME: Workaround to retry with search\n  if (count == 0 && hasVibes) {\n    let newOptions = Object.assign({}, options)\n    newOptions.search = vibes[0]\n    newOptions.vibes = []\n\n    response = await getPlaces(newOptions)\n    //response = await\n  }\n\n  const placeResults = response.data && response.data.results && response.data.results.features\n    ? response.data.results.features\n    : []\n\n  let places = formatPlaces(placeResults)\n  //console.log('Got reponse ', response.data)\n\n  const vibesQuery = vibes ? vibes : []\n\n  // TODO: Consider scoring related vibe differently\n  const vibesCombined = vibesQuery\n    .concat(preferredVibes ? preferredVibes : [])\n\n  const newOptions = {\n    ...options,\n    relatedVibes: relatedVibes\n  }\n\n  // TODO: Incorporate personalized vibe score for user\n  let placesScoredAndSorted = scorePlaces(\n    places,\n    centerPoint,\n    vibesCombined,\n    scoreBy,\n    ordering,\n    options && options.shouldShuffle\n      ? options.shouldShuffle\n      : false,\n    newOptions // Pass any overrides\n  )\n\n  const top_categories = getTopCategories(places)\n  const top_tags = getTopTags(places)\n  const top_vibes = getTopVibes(places)\n  const top_locations = getTopLocations(places)\n\n  return {\n    data: placesScoredAndSorted,\n    count: count,\n    top_categories: top_categories,\n    top_locations: top_locations,\n    top_tags: top_tags,\n    top_vibes: top_vibes,\n    loading: false,\n    timedOut: false,\n  }\n}\n\nexport const fetchPlacesFromSearch = async (location) => {\n  const endpoint = 'https://dev.vibemap.com/search_places'\n  const query = ''\n  const params = new URLSearchParams([\n    ['query', query],\n    ['latitude', location.latitude],\n    ['longitude', location.longitude]\n  ])\n\n  const response = await axios.get(`${endpoint}?${params.toString()}`)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return {\n        data: [],\n        count: 0,\n        query: '?' + query,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n  return response\n}\n\nexport const fetchPlacesFromIds = async (\n  ids = [\n    '740b43a4-3925-4413-9414-fff9d8d16932',\n    'c8262c66-1a83-4d4b-a3e6-8710864ffd1f'\n  ]\n) => {\n  // Param pattern is like this ?ids={id1}__{id2}\n  const endpoint = ApiUrl + '/search/places'\n\n  params = new URLSearchParams([\n    ['ids', ids.join('__')]\n  ])\n\n  const response = await axios.get(`${endpoint}?${params.toString()}`)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n      return {\n        data: [],\n        error: error,\n        count: 0,\n        query: '?' + params,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n  const count = response.data.count\n  const placeResults = response.data && response.data.results && response.data.results.features\n    ? response.data.results.features\n    : []\n\n  return {\n    data: placeResults,\n    count: count,\n    loading: false,\n    timedOut: false,\n  }\n}\n\n// Handle fields from the tile server\nexport const decodePlaces = (places) => {\n  const decoded = places.map((feature) => {\n    //console.log('feature: ', feature)\n    feature.properties.vibes = JSON.parse(feature.properties.vibes)\n    feature.properties.subcategories = JSON.parse(\n      feature.properties.subcategories\n    )\n    feature.properties.categories = JSON.parse(feature.properties.categories)\n    feature.properties.vibemap_images = []\n    feature.properties.images = [feature.properties.thumbnail_url]\n    if (feature.properties.opening_hours != undefined)\n      feature.properties.opening_hours = JSON.parse(\n        feature.properties.opening_hours\n      )\n    delete feature.properties.tips\n    //delete feature.properties.subcategories\n    delete feature.properties.facebook\n    delete feature.properties.telephone\n    delete feature.properties.website\n\n    return feature\n  })\n\n  return decoded\n}\n\n// Do some post-parsing clean up to the data\n// TODO: API Update for Places\nexport const formatPlaces = (places = []) => {\n  // TODO: Replace with activityCategories\n\n  // FIXME: Make this flat level 1 categories\n  const categories = categories_flat\n  const categories_top_flat = getCategoriesByLevel(2).map(category => category.slug)\n\n  const formatted = places.map((place) => {\n    if (!place) {\n      return null; // Skip null or undefined places\n    }\n    let fields = place.properties\n    // Add fields for presentation\n    fields.place_type = 'places'\n    fields.short_name = truncate(fields.name, constants.TRUCATE_LENGTH)\n    fields.aggregate_rating = parseFloat(fields.aggregate_rating)\n    if (fields.aggregate_rating_count == null) {\n      fields.aggregate_rating_count = 1\n    }\n    fields.num_vibes = fields.vibes.length\n\n    fields.sub_categories = fields.sub_categories\n    fields.top_vibe = null\n\n    const matchingCategories = fields.categories\n      .map(category => {\n        if (category == 'Drink') category = 'Drinking'\n        return category.toLowerCase()\n      })\n      .filter(category => categories_top_flat.includes(category.toLowerCase()))\n\n    const sortedCategories = sortByArray(matchingCategories, categories)\n\n    if (fields.categories === undefined ||\n      fields.categories.length === 0) {\n      fields.categories = ['place']\n    }\n\n    // TODO: Add proper theming\n    const theme = 'light'\n    const icon_label = sortedCategories[0] ? sortedCategories[0] : 'dot'\n    fields.icon = sortedCategories[0] ? `icon_${icon_label}_${theme}` : icon_label\n    fields.cluster = null\n    //console.log('DEBUG fields.icon: ', fields.icon)\n\n    place.properties = fields\n    return place\n  }).filter(Boolean);\n  return formatted\n}\n\nexport const vibesFromPlaces = (places) => {\n  const vibes = []\n  // TODO: get frequency of vibes from a set of places\n  return vibes\n}\n\nexport const getRecommendedVibes = (vibes) => {\n  const recommended = []\n  // Find related and recommended vibes for the given set.\n  return recommended\n}\n\nexport const scorePlaces = (\n  places,\n  centerPoint,\n  vibes = [],\n  scoreBy = ['vibes', 'aggregate_rating', 'distance'],\n  ordering,\n  shuffle = true,\n  zoom = 12,\n  options = {}\n) => {\n  //console.log('scorePlaces: ', places, ordering, scoreBy)\n\n  // Default max values; These will get set by the max in each field\n  let maxScores = {}\n\n  // Bonuses between 1 and 10\n  // TODO reconfigure bonus scores in a way that is more mathematically sound\n  // to use zoom-weight scaling\n\n  const vibeMatchBonus = 10\n  const vibeRelatedBonus = 2\n  const vibeOrderBonus = 1\n  const vibeAmountBonus = 2\n  const offerBonus = 2\n  const imageBonus = 2\n  const openBonus = 0.5\n  const popularBonus = 5\n\n  // TODO: If ordered by vibe, rank matches very high\n  const vibeRankBonus = ordering == 'vibe' ? 30 : 20\n\n  // ⚡ \tFirst, initialize the scoring fields\n  //\t\tDefaults should be on extreme ends to prevent logical errors\n  let minScores = {};\n\n  scoreBy.map((field) => (maxScores[field] = 0.00001))\n  // Default min values; These will get set by the min in each field\n  scoreBy.map((field) => (minScores[field] = Infinity))\n\n  // Default any zoom level less than ten to be ten, not useful to weigh distance at that point\n  let zoom_to_use = zoom <= 10 ? 10 : zoom;\n  let zoom_norm = normalize_all(zoom_to_use, 10, 20, 0, 10)\n\n  // Logistic growth equation. Max weight is 8, minimum of 1. Weight grows exponentially in the middle range\n  // TODO: pull this out into own function, allows us to weigh distance differently depending on zoom\n  let zoom_weight = 8 / (1 + (7 * (Math.exp(1) ** (-0.7 * zoom_norm))))\n\n  // Weight distance & rating different than other fields\n  // TODO: Make everything a consitent 1-10 scale\n  let weights = {\n    category: 0,\n    vibe: 10,\n    distance: zoom_weight,\n    rating: 4,\n    hours: 0,\n    offers: 0,\n  }\n\n  // If there are vibes, weigh the strongest by 3x\n  // if (vibes.length > 0 && ordering === 'relevance') weights.vibe = 2\n  // Do the same for other sorting preferences\n  if (ordering !== 'relevance') weights[ordering] += 3\n\n  // Get scores and max in each category\n  const placesScored = places.map((place) => {\n    let fields = place.properties\n    fields.stats = {}\n\n    // Give place a vibe score\n    // TODO: Calculate `vibe_score` on backend with stored procedure.\n    // TODO: Make a separate, modular method\n    if (scoreBy.includes('vibes')) {\n      let [vibeMatches, relatedVibeMatches, averageRank, vibeBonus] = [0, 0, 0, 0]\n\n      fields.vibes_score = 0\n      // TODO: TEMP until events return vibes\n      if (fields.vibes === undefined) fields.vibes = ['chill']\n\n      // Based off logrithmic scale, a place with 20 vibes isn't that much (twice) better than one with 10\n      const scoreVibeLength = fields.vibes.length > 0\n        ? vibeAmountBonus * Math.log10(fields.vibes.length)\n        : 0\n\n      if (fields.vibes.length > 0) fields.vibes_score = scoreVibeLength\n\n      // Don't show markers without photos; this will analyze the vibe and quality of the image\n      //Reward photos logrithmically as well. Log indicates scaling behavior, coefficient the weight\n      if (fields.images && fields.images.length > 0) vibeBonus += fields.images.length > 0\n        ? imageBonus * Math.log10(fields.images.length)\n        : 0\n\n      // Give direct vibe matches bonus points\n      if (vibes && vibes.length > 0 && fields.vibes) {\n        vibeMatches = matchLists(vibes, fields.vibes)\n\n        relatedVibeMatches = options.relatedVibes ?\n          matchLists(options.relatedVibes, fields.vibes)\n          : 0\n        // The average rank scores by the order of the array\n        // That is the first vibe gets ranks higher than the last one\n        averageRank = rankVibes(vibes, fields.vibes)\n\n        // Bonus for exact matches + all place vibes\n        const vibeMatchScore = vibeMatches * vibeMatchBonus + relatedVibeMatches * vibeRelatedBonus\n        const vibeOrderScore = averageRank * vibeOrderBonus\n        vibeBonus += vibeMatchScore + vibeOrderScore\n        fields.vibes_score += vibeBonus\n\n        // For debugging purposes\n        fields.stats['num_vibes'] = fields.vibes.length\n        fields.stats['num_matching_vibes'] = vibeMatches\n        fields.stats['vibe_match_score'] = vibeMatchScore\n        fields.stats['vibe_order_score'] = vibeOrderScore\n      }\n\n      // Set max vibe score\n      if (fields.vibes_score > maxScores.vibes) {\n        maxScores.vibes = fields.vibes_score\n      }\n\n      if (fields.vibes_score < minScores.vibes) {\n        minScores.vibes = fields.vibes_score\n      }\n\n      //console.log('Scoring weights: ', weights, ordering, vibeRankBonus)\n      //console.log('For these vibes: ', fields.vibes)\n      //console.log('Vibe score bonus: ', fields.vibes_score, vibeBonus)\n      //console.log('Vibe order bonus: ', fields.vibes_score, vibeBonus)\n      //console.log('Vibe score: ', vibeMatches, averageRank, vibeBonus)\n      fields.stats['total_vibe_score'] = fields.vibes_score\n    }\n\n    // Get scores and max in each category\n    // TODO: Make a separate, modular method\n    if (scoreBy.includes('categories')) {\n      let [categoryMatches, averageRank, vibeBonus] = [0, 0, 0]\n\n      fields.categories_score = 0\n\n      // Merge and remove duplicates\n      const concatCategories = fields.categories.concat(fields.subcategories);\n      const allCategories = concatCategories.filter(\n        (item, index) => concatCategories.indexOf(item) == index\n      );\n\n      if (fields.categories.length > 0)\n        fields.categories_score = fields.categories.length\n      //console.log('Base category score: ', fields.categories_score, allCategories)\n\n      // Give matching categories for the vibe a bonus\n      if (vibes.length > 0) {\n        // Get vibes for the place category\n        let categoryVibes = []\n        allCategories.forEach((category) => {\n          //console.log('Category: ', fields.name, category)\n          // TODO: There probably a cleaner way to search for both categories and subcategories\n          const foundCategories = constants.place_sub_categories.filter((o) =>\n            o.main_category.includes(category)\n          );\n          const foundSubcategories = constants.place_sub_categories.filter(\n            (o) => o.name.includes(category)\n          );\n\n          if (foundCategories.length > 0) {\n            categoryVibes = categoryVibes.concat(foundCategories[0].vibes);\n          }\n\n          if (foundSubcategories.length > 0) {\n            categoryVibes = categoryVibes.concat(foundSubcategories[0].vibes);\n          }\n        });\n\n        categoryMatches = matchLists(vibes, categoryVibes)\n        const bonus = categoryMatches * vibeMatchBonus\n        fields.categories_score += bonus\n      }\n\n      if (fields.categories_score > maxScores['categories']) {\n        maxScores['categories'] = fields.categories_score;\n      }\n      if (fields.categories_score < minScores['categories']) {\n        minScores['categories'] = fields.categories_score;\n      }\n    }\n\n    // Get the min and max scores for normalization\n    // Add score for the number of likes or RSVPs for events\n    if (scoreBy.includes('likes')) {\n      // Set max aggregate score\n      if (fields.likes > maxScores['likes']) {\n        maxScores['likes'] = fields.likes\n      }\n\n      if (fields.likes < minScores['likes']) {\n        minScores['likes'] = fields.likes\n      }\n    }\n\n    // Add score for distance from user\n    if (scoreBy.includes('distance')) {\n      // TODO: Make a util in map.js\n      const placePoint = turf.point(place.geometry ? place.geometry.coordinates : [0, 0])\n\n      // Does this return in kilometers? Miles?\n      fields['distance'] = turf_distance(centerPoint, placePoint)\n      // Set max distance\n      if (fields['distance'] > maxScores['distance']) {\n        maxScores['distance'] = fields['distance']\n      }\n      if (fields['distance'] < minScores['distance']) {\n        minScores['distance'] = fields['distance']\n      }\n    }\n\n    if (scoreBy.includes('aggregate_rating')) {\n      // Set max aggregate score\n      if (fields.aggregate_rating > maxScores['aggregate_rating']) {\n        maxScores['aggregate_rating'] = fields.aggregate_rating\n      }\n      if (fields.aggregate_rating < minScores['aggregate_rating']) {\n        minScores['aggregate_rating'] = fields.aggregate_rating\n      }\n\n      if (minScores['aggregate_rating_count'] == undefined) {\n        minScores['aggregate_rating_count'] = 1\n        maxScores['aggregate_rating_count'] = 1\n      }\n      // And the count of ratings that make the score\n      if (fields.aggregate_rating_count > maxScores['aggregate_rating_count']) {\n        maxScores['aggregate_rating_count'] = fields.aggregate_rating_count\n      }\n      if (fields.aggregate_rating_count < minScores['aggregate_rating_count']) {\n        minScores['aggregate_rating_count'] = fields.aggregate_rating_count\n      }\n    }\n\n    // TODO: WIP concept for popular times and hours\n    // TODO: Move to backend or make a separate, modular method\n    //console.log('Score place on these fields: ', fields.offers, fields.opening_hours)\n    fields.offers_score = 0\n    fields.hours_score = 0\n\n    // Give bonus if place has offers or is open\n    if (scoreBy.includes('offers')) {\n      if (fields.offers && fields.offers.length > 0) {\n        fields.offers_score = offerBonus\n      }\n\n      let { openNow, openToday, opens, closes, isPopular } = isOpen(\n        fields.opening_hours\n      );\n\n      // Store in place details\n      // TODO: Make sure these field name match the upgraded API\n      fields.open_now = openNow\n      fields.popular_now = isPopular\n      fields.opens = opens\n      fields.closes = closes\n\n      // Give bonus if open now\n      if (openToday) fields.hours_score += openBonus\n      if (openNow) fields.hours_score += openBonus\n      if (isPopular) fields.hours_score += popularBonus\n    }\n\n    fields.stats['hours_bonus'] = fields.hours_score\n\n    place.properties = fields\n    return place\n  });\n\n  // Now normalize all the scores\n  let maxAverageScore = 0\n  let minAverageScore = Infinity\n\n  // Normalize each place by the top scores across all results\n  let placesScoredAveraged = placesScored.map((place) => {\n    let fields = place.properties\n\n    // TODO: This could be more steamlined automatically for each key in scoreBy\n    if (scoreBy.includes('vibes')) {\n      fields.vibes_score = normalize_all(fields.vibes_score, minScores['vibes'], maxScores['vibes'], 0, 1)\n      fields.vibes_score = fields.vibes_score * weights['vibe']\n      //console.log('fields.vibes_score: ', fields.name, fields.vibes_score)\n    }\n\n    if (scoreBy.includes('categories')) {\n      fields.categories_score = normalize_all(\n        fields.categories_score, minScores['categories'], maxScores['categories'], 0, 1);\n      fields.categories_score = fields.categories_score * weights['category']\n      //console.log('fields.categories_score: ', fields.name, fields.categories_score)\n    }\n\n    if (scoreBy.includes('likes')) {\n      fields.likes_score = normalize_all(fields.likes, minScores['likes'], maxScores['likes'], 0, 1)\n    }\n\n    if (scoreBy.includes('venue')) {\n      fields.venue_score = normalize_all(fields.place_vibe_count, minScores['likplace_vibe_countes'], maxScores['place_vibe_count'], 0, 1)\n    }\n\n    // Get average rating and scale it by a factor\n    if (scoreBy.includes('aggregate_rating')) {\n      const aggregate_score = normalize_all(\n        fields.aggregate_rating,\n        minScores['aggregate_rating'],\n        maxScores['aggregate_rating'],\n        0, 1)\n\n      const aggregate_rating_count_score = normalize_all(\n        fields.aggregate_rating_count,\n        minScores['aggregate_rating_count'],\n        maxScores['aggregate_rating_count'],\n        0, 1)\n\n      //console.log('DEBUG: Combine rating score ', aggregate_score, aggregate_rating_count_score)\n      fields.aggregate_rating_score = (aggregate_score + aggregate_rating_count_score) / 2\n      fields.aggregate_rating_score *= weights.rating\n      fields.stats['aggregate_rating_score'] = fields.aggregate_rating_score\n    }\n\n    // Smallest distance gets largest score\n    if (scoreBy.includes('distance')) {\n      let maxDistance = maxScores['distance']\n\n      /* all distance values are normalized between 0 and 0.95. Since we take the difference of 1 and the score,\n        the lowest possible distance_score is 0.05, and the highest is 1. We do this such that lower distances\n        (closer places) get a higher distacne score.\n      */\n      fields.distance_score = 1 - normalize_all(fields.distance, minScores['distance'], maxDistance, 0, 0.95)\n\n      //console.log(fields.distance, minScores['distance'], maxDistance, maxDistance - fields.distance, fields.distance_score)\n      fields.distance_score *= weights.distance\n      fields.stats['distance_score'] = fields.distance_score\n    }\n\n    if (scoreBy.includes('hours')) {\n      fields.hours_score *= weights.hours\n    }\n\n    const reasons = scoreBy;\n    const scores = scoreBy.map((field) => fields[field + '_score'])\n\n    // Find the larged score\n    const largestIndex = scores.indexOf(Math.max.apply(null, scores))\n\n    // Find the smallest score\n\n    scores.indexOf(Math.min.apply(null, scores))\n\n    // Take an average of each of the scores\n    fields.average_score = scores.reduce((a, b) => a + b, 0) / scores.length\n    // Update the top average score\n    if (fields.average_score > maxAverageScore)\n      maxAverageScore = fields.average_score;\n\n    if (fields.average_score < minAverageScore)\n      minAverageScore = fields.average_score\n    // Add the update the reason code\n    fields.reason = reasons[largestIndex]\n    //console.log(`Top reason `, fields.name, fields.reason)\n\n    place.properties = fields\n    return place\n  })\n\n  // Re-sort by average score\n  const placesScoredAndSorted = placesScoredAveraged.sort(\n    (a, b) => b.properties.average_score - a.properties.average_score\n  )\n\n  // Normalize the scores between 0.65 and 1\n  const placesSortedAndNormalized = placesScoredAndSorted.map((place) => {\n    let fields = place.properties\n    //console.log(place.properties.name, minAverageScore, fields.average_score, maxAverageScore)\n\n    // ⚡⚡ final score returned to user is normalized between 0.65 and 1\n    fields.average_score = normalize_all(fields.average_score, minAverageScore, maxAverageScore, 0.65, 1)\n    fields.icon_size = scaleIconSize(fields.average_score, 0.65, 1)\n\n    // All average_scores should be between 0.65 and 1, and icon_size between 1 and 5. Should also print in descending order\n    //If so, then all is working well\n    //console.log(place.properties.name, place.properties.address, fields.average_score, fields.distance_score, weights.distance)//, fields.icon_size)\n    // Scale the icon size based on score\n    fields.stats['final_score_normalized'] = fields.average_score\n\n    return place\n  })\n\n  // TODO: for debugging only\n  /*placesSortedAndNormalized.map((place) => {\n    console.log(place.properties.name)\n    console.log(' - score: ', place.properties.average_score)\n    console.log(' - vibes_score: ', place.properties.vibes_score)\n    console.log(' - aggregate rating: ', place.properties.aggregate_rating_score)\n    console.log(' - distance: ', place.properties.distance_score, \"weight: \", weights.distance)\n    console.log(' - reason: ', place.properties.reason)\n    console.log(' - final_score_normalized: ', place.properties.average_score)\n  })\n  */\n\n  const numPlaces = placesSortedAndNormalized.length\n  const results = shuffle && numPlaces > 100\n    ? module.exports.shuffleTopPicks(placesSortedAndNormalized)\n    : placesSortedAndNormalized\n\n  return results\n}\n\n// Only return the requested fields and remove all others from GeoJSON properies\nexport const reducePlaceProperties = (\n  places,\n  fields = [\n    'name',\n    'url',\n    'address',\n    'categories',\n    'subcategories',\n    'neighborhood',\n    'price',\n    'short_description',\n    'vibemap_images',\n    'vibes'\n  ]) => {\n\n  const places_reduced = places.map(place => {\n    place.properties = Object.fromEntries(\n      fields.map(key => [key, place.properties[key]])\n    )\n    return place\n    //console.log('reduced this place ', place.properties)\n  })\n\n  return places_reduced\n}\n\nexport const shuffleTopPicks = (places, numTop = 20) => {\n  // Slice and Shuffle\n  const topPlaces = places.slice(0, numTop)\n    .map(value => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value)\n\n  // Store remainder\n  const remainingPlaces = places.slice(numTop)\n\n  // Combine and return all\n  const placesCombined = topPlaces.concat(remainingPlaces)\n  return placesCombined\n}\n\nexport const toTitleCase = (str) => {\n  if (typeof str == 'string') {\n    str = str.toLowerCase().split(' ')\n    for (var i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1)\n    }\n    return str.join(' ')\n  } else {\n    return str\n  }\n}\n\n\n// TODO: add neighborhood as top place of the list. Will need some neighborhood cards\n//Function that returns every place within a certain specified radius\nexport const nearest_places = (places, currentLocation, radius = 5) => {\n  //console.log(\"current Location: \", currentLocation)\n  //console.log(\"Full list of Places: \", places)\n\n  // Push any place whose distance is under radius (0.1) to places_temp\n  var places_temp = []\n  const distance_calculated = places.map((place) => {\n    let fields = place.properties\n    const placePoint = turf.point(place.geometry.coordinates)\n    fields['distance'] = turf_distance(currentLocation, placePoint)\n    if (fields['distance'] < radius) {\n      places_temp.push(place)\n      //console.log(\"Place within bound: \", fields[\"distance\"])\n    }\n  })\n\n  // Sort on a copy not a reference\n  var places_to_return = places_temp.slice(0)\n\n  // Do sorting after .map(), should be faster performance\n  places_to_return.sort(function (a, b) {\n    return a.properties.distance - b.properties.distance\n  })\n\n  /* For debugging, make sure every place is sorted in ascending order\n  places_to_return.map((x) => {\n    console.log(\"sorted: \", x.properties.distance)\n  })\n  */\n  return places_to_return\n}\n\n//Function that checks if a place is within a certain distance of user, for check ins\nexport const validate_check_in = (place, currentLocation, threshold = 0.5) => {\n  const placePoint = turf.point(place.geometry.coordinates)\n  const within_distance = turf_distance(currentLocation, placePoint) < threshold ? true : false\n  return within_distance\n}\n// Function determines if a point falls into the specific boundaries of Jack London District\nexport const in_jls = (currentLocation) => {\n\n  // Hand drawn locations. Roughly everything beneath 7th St, between Market St. and Fallon St.\n  const bounds_jls = turf.polygon([[\n    [-122.282617, 37.802862],\n    [-122.264300, 37.795721],\n    [-122.265502, 37.787005],\n    [-122.288139, 37.796077],\n    [-122.282617, 37.802862]\n  ]])\n  return turf_boolean(currentLocation, bounds_jls)\n}\n\n// Primary function that returns a list of neighborhoods the location is in.\n// The input is the place's properties, returns array of neighborhood id's\n// Vectorizes our wordpress neighborhoods data (neighborhoods.json) and flexibly utilizes available information as bounds\n// If no bounds (bbox) is given, use radius, if no radius, then a hard radius of 0.8 km is set\nexport const in_neighborhood = (place) => {\n\n  // Name array is not returned but could be if desired, more for debugging\n  const valid_neighborhoods_id = []\n  const valid_neighborhoods_name = []\n  const turf_point = turf.point(place.geometry.coordinates)\n\n  neighborhoods.map((neighborhood) => {\n    const neigh_dist = turf_distance([neighborhood.map.lng, neighborhood.map.lat], turf_point)\n\n    /* Use helper function since can't assign turf.boolean() to non valid polygons which in turn can't be handled within\n     the conditional statement*/\n    if (neigh_dist < 5 && in_bbox_helper(place.geometry.coordinates, neighborhood.boundary)) {\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else if (neighborhood.radius > 0.00001 && neigh_dist < neighborhood.radius) {\n      //console.log(\"radius checked\")\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else if (neigh_dist < 0.8) {\n      //console.log(\"dist checked\")\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else {\n\n    }\n  })\n  return valid_neighborhoods_id\n}\n\n// Helper function to determine if a location is within certain bounds\nexport const in_bbox_helper = (point, bbox) => {\n  if (bbox !== \"\" && bbox !== undefined) {\n    const parsed_bbox = JSON.parse(bbox)\n    const bounds = turf.polygon([parsed_bbox])\n    //console.log(\"bbox\", parsed_bbox)\n    return turf_boolean(point, bounds)\n  } else {\n    //console.log(\"no bbox\")\n    return false\n  }\n}\n\n// General function to find nearest neighborhood of a locations. Returns top ten options\n// Input must be [longitude, lattitude] coordinates\nexport const nearest_neighborhood = (placePoint) => {\n  const neighborhoods_ordered = neighborhoods.map((neighborhood) => {\n    return {\n      name: neighborhood.name,\n      neigh_dist: turf_distance([neighborhood.map.lng, neighborhood.map.lat], placePoint)\n    }\n  })\n  neighborhoods_ordered.sort(function (a, b) {\n    return a.neigh_dist - b.neigh_dist\n  })\n  return neighborhoods_ordered.slice(0, 10)\n}\n\n// Helper function for associate_badge. Returns every neighborhood challenge badge\n// TODO modify such that inputs can be multiple badge types, for example lookup general badges or neighborhood or place etc.\nexport const challenge_badges_lookup = () => {\n  const challenge_badges = []\n  badges.badges.map((badge) => {\n    if (badge.type == \"neighborhood\") {\n      challenge_badges.push(badge)\n    }\n  })\n  return challenge_badges\n}\n\n// Returns array of valid badges (and properties) that a place is associated with. Give points towards that badge\nexport const associate_badge = (locations) => {\n  const badges_to_check = challenge_badges_lookup()\n  const win_badges = []\n  badges_to_check.map((badge) => {\n    console.log(badge)\n    for (let i = 0; i < locations.length; i++) {\n      if (badge.location.ID == locations[i]) {\n        win_badges.push(badge)\n      }\n    }\n  })\n  return win_badges\n}\n\n/**\n * Cities from Mapbox by keyword or name\n *\n * @param {String} search\n *\n * @returns {Object[]}\n */\nexport const searchCities = async (search = '') => {\n  const endpoint = `https://dev.vibemap.com/search_locations/?city=${search}`\n  const distanceForMatch = 10\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n    return {\n      error: true,\n      data: error\n    }\n  })\n\n  const results = response.data.map(newCity => {\n\n    const foundCity = cities.find(city => city.name.includes(newCity.name))\n    if (foundCity) {\n      const checkDistance = distanceBetweenLocations(newCity.location, foundCity.location)\n      if (checkDistance < distanceForMatch) {\n        return foundCity\n      }\n    }\n    // TODO: Make this fuzzy search on a new service\n    let foundNeighborhood = neighborhoods.find(neighborhood => {\n      return neighborhood.name.toLowerCase().includes(newCity.name.toLowerCase())\n    })\n\n    return newCity\n  })\n\n  return results\n}\n\n\nexport const searchTags = async (search = 'art') => {\n  // https://api.vibemap.com/v0.3/tag-autocomplete/?q={search}\n  const path = 'tags'\n  const endpoint = `${ApiUrl}/${path}/?${search}`\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n    return {\n      error: true,\n      data: error\n    }\n  })\n\n  console.log('tags response ', response.data)\n\n  return response.data\n}\n\nexport const getAllBoundaries = async () => {\n  const random = Math.random()\n  const endpoint = `https://api.vibemap.com/v0.3/boundaries/?admin_level=both&include_hidden=1&per_page=100&random=${random}`\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n  })\n\n  return response.data\n}\n\nexport const getBoundary = async (slug = 'chicago') => {\n  const endpoint = `https://api.vibemap.com/v0.3/boundaries/?admin_level=both&slug=${slug}`\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n  })\n\n  if (response && response.data) {\n    try {\n      const boundary = response.data.results[0] || null\n      return boundary\n    } catch (error) {\n      console.log('Problem with boundary data ', error);\n      return null\n    }\n\n  } else {\n    return null\n  }\n}\n\nexport const searchPlacesByName = async (options, apiURL) => {\n\n  const centerPoint = options.point ? options.point.split(',').map(parseFloat) : ''\n\n  let searchParams = {\n    ordering: 'name',\n    category: options.category || '',\n    per_page: options.perPage || 50,\n    dist: options.distance > 0 ? options.distance * constants.METERS_PER_MILE : '',\n    point: centerPoint,\n    search: options.search || '',\n    vibes: options.vibes || '',\n    zoom: options.zoom || '',\n  }\n\n  let apiResult\n\n  const useElastic = true\n  const apiPath = useElastic ? 'search/places' : 'places'\n\n  const searchQuery = new URLSearchParams(searchParams).toString()\n  apiResult = await axios.get(`${apiURL}/${apiPath}/?${searchQuery}`)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return []\n    })\n\n  const results = apiResult.data\n    ? apiResult.data.results.features\n    : []\n  return results\n}\n\n/* Simple consumption of our elastic search suggestion endpoint. 'string' is user inputted text. If context is true,\ncan set a numerical lat, long, and radius as well. Will suggest places by string input within that boundary\n*/\nexport const suggestPlacesByName = async (string, apiURL, context = false, latitude = null, longitude = null, radius = null) => {\n\n  // console.log(`HELPERS`, context, longitude, radius)\n\n  // If latitude and longitude, but radius is null, will just return all results in order from closest to furthest\n  let geoContext = latitude !== null & longitude !== null & context\n    ? `${latitude.toString()}__${longitude.toString()}`\n    : null\n\n  // Radius in kilometers\n  geoContext = radius & context ? geoContext + `__${radius.toString()}km` : geoContext\n\n  // context defaulted to false, targets name_suggest__completion endpoint. Pass true to use geo context filters\n  const fullURL = context\n    ? `${apiURL}/places/suggest/?name_suggest_context=${string}&name_suggest_loc=${geoContext}`\n    : `${apiURL}/places/suggest/?name_suggest__completion=${string}`\n  //console.log(`HELPERS suggestPlacesByName full URL: ${fullURL}`)\n\n  let apiResult\n  // const searchQuery = new URLSearchParams(searchParams).toString()\n  apiResult = await axios.get(fullURL)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return []\n    })\n\n  // console.log(\"HELPERS suggestPlacesByName results: \", apiResult.data)\n\n  // Trimming is slightly different depending on completion or context.\n  const results = apiResult.data\n    ? context\n      ? apiResult.data.name_suggest_context[0].options.map((item) => {\n        return item[\"_source\"]\n      })\n      : apiResult.data.name_suggest__completion[0].options.map((item) => {\n        return item[\"_source\"]\n      })\n    : []\n  return results\n}\n\n\n/**\n * Gets related vibes for a neighborhood and sorts neighborhoods\n * by vibe intersection count between related and neighborhood vibes.\n *\n * @param {Object[]} neighborhoods\n * @param {String[]} vibeSlugs\n *\n * @returns {Object[]}\n */\nexport const sortNeighborhoodsByVibes = (neighborhoods, vibeSlugs) => {\n  if (vibeSlugs.length === 0) return neighborhoods\n\n  const relatedVibeSlugs = getRelatedVibes(vibeSlugs)\n  const vibeSlugsToIntersect = [...new Set([...vibeSlugs, ...relatedVibeSlugs])]\n\n  // add vibeIntersection property\n  const neighborhoodsWithVibeIntersection = neighborhoods.map(\n    (neighborhood) => {\n      const neighborhoodVibes = neighborhood.vibes || neighborhood.acf.vibes\n      const neighborhoodVibeSlugs = neighborhoodVibes.map(({ slug }) => slug)\n\n      const vibeIntersection = vibeSlugsToIntersect.filter((slug) =>\n        neighborhoodVibeSlugs.includes(slug)\n      ).length\n\n      return {\n        ...neighborhood,\n        vibeIntersection\n      }\n    }\n  )\n\n  const sortedNeighborhoods = neighborhoodsWithVibeIntersection.sort((a, b) =>\n    b.vibeIntersection - a.vibeIntersection\n  )\n\n  // remove vibeIntersection property (just to not alter previous structure)\n  return sortedNeighborhoods.map((neighborhood) => {\n    const { vibeIntersection, ...restOfNeighborhood } = neighborhood\n    return restOfNeighborhood\n  })\n}\n"],"names":["axiosRetry","Axios","retries","retryDelay","exponentialDelay","onRetry","count","err","config","console","log","axios","jsonpack","dayjs","extend","isBetween","dayjsRecur","require","let","activityCategories","categories_flat","getAPIDomain","mode","env_mode","process","env","API_ENV","current_mode","api_domain","api_version","useSearchAPI","useSearchAPIEvents","ApiUrl","filterList","list","test","value","searchTerm","key","re","RegExp","replace","filter","item","result","isMatch","getRandomItem","Math","floor","random","length","encodeCardIndex","row","column","matchLists","listA","listB","matches","includes","word","rankVibes","rankings","map","score","indexOf","reduce","a","b","sortByKey","sortByPopularity","aPop","parseInt","details","msv","activityCategoriesPacked","unpack","sort","category","name","toLowerCase","error","sortByArray","sortedList","sortingArr","isClosedToday","dailyHours","opens","closes","displayHours","hours","dayFormat","openHours","isOpen","weeklyHours","find","day_of_week","openEveryday","times","time","format","popularFound","push","day","i","orderedHours","dayFound","isClosed","undefined","closed","Object","assign","split","hour","minute","date","openNow","openToday","isPopular","hasDailyHours","daysClosed","parseDateTime","datetime","formatDateTime","formatHtml","showDayOfWeek","month","weekday","getCardOptions","categoryQuery","distanceQuery","geoQuery","searchQuery","vibeQuery","block","singCards","posts","overrideQuery","vibe","cities","selectedCity","slug","location","distance","firstCity","vibesFromCategories","point","longitude","latitude","ordering","search","vibes","getAPIParams","options","per_page","includeRelated","useElastic","activity","params","distanceInMeters","round","constants.METERS_PER_MILE","coords","lat","lon","tags","editorial_category","term","is_chain","is_closed","is_destination","city","getCategoryMatch","categories","all_categories","getFullLink","link","type","parse_url","url","parse","URL","path","instagram","twitter","facebook","geLocationFromCity","cityDetails","placemarker","getMax","items","attribute","max","forEach","getMin","min","getTimeOfDay","isValid","currentHour","parseFloat","getTopLocations","places","location_type","flat","top_locations","place","properties","hasOwnProperty","sortable","top_locations_sorted","getTopTags","top_tags","tag","top_tags_sorted","getTopVibes","top_vibes","top_vibes_sorted","getTopCategories","top_categories","getWaveFromVibe","graphToEvents","edges","edge","groupEvent","node","groupDetails","description","image","images","original","price","recurrence","recurring","which","startTime","endTime","recurRule","nextDateFromRecurring","nextStartTime","next","toLocaleString","nextEndTime","id","title","geometry","coordinates","dateTime","card_type","address","streetAddress","is_online","hotspots_place","start_date","end_date","vibemap_images","likes","recurs","groupsToEvents","groups","acf","label","start_time","end_time","toISOString","normalize","val","normalize_all","scale_low","scale_high","scale","LinearScale","domain","range","scaleIconSize","scaleMarker","zoom","isNaN","marker_scale","base_marker","max_marker","scaleDensityArea","density","area","density_scale","scaleDensityBonus","inverted_scale","constants.HEATMAP_INTENSITY","HEATMAP_INTENSITY","relative_density","scaleScore","scaleSelectedMarker","getEventOptions","date_range","locations","concat","neighborhoods","selectedLocation","today","dayOfWeek","startOf","startOffset","endOffset","monthEnd","endOf","diff","date_range_start","add","date_range_end","start_date_after","end_date_before","fetchEvents","async","activitySearch","recurringSearch","days","centerPoint","currentLocation","getLocationFromPoint","nearestCities","sortLocations","module","exports","query","querystring","stringify","apiEndpoint","source","CancelToken","response","get","cancelToken","token","catch","statusText","data","loading","timedOut","getGroups","recurringGroupEvents","results","features","whichDay","weekOfMonth","recur","every","daysOfWeek","weeksOfMonthByDay","fetchPlacesDetails","fetchPlacePicks","preferredVibes","relatedVibes","useNearest","numOfPlaces","hasVibes","distanceFrom","distanceBetweenLocations","centerpoint","join","getPlaces","newOptions","placeResults","formatPlaces","vibesQuery","vibesCombined","placesScoredAndSorted","scorePlaces","shouldShuffle","fetchPlacesFromSearch","URLSearchParams","toString","fetchPlacesFromIds","ids","endpoint","decodePlaces","feature","JSON","subcategories","thumbnail_url","opening_hours","tips","telephone","website","categories_top_flat","getCategoriesByLevel","fields","place_type","short_name","truncate","constants.TRUCATE_LENGTH","aggregate_rating","aggregate_rating_count","num_vibes","sub_categories","top_vibe","matchingCategories","sortedCategories","icon_label","icon","cluster","Boolean","vibesFromPlaces","getRecommendedVibes","scoreBy","shuffle","maxScores","minScores","field","Infinity","zoom_to_use","zoom_norm","weights","exp","rating","offers","placesScored","stats","vibeMatches","vibeBonus","vibes_score","scoreVibeLength","log10","vibeMatchScore","vibeOrderScore","categoryMatches","categories_score","concatCategories","allCategories","index","categoryVibes","foundCategories","constants.place_sub_categories","o","main_category","foundSubcategories","placePoint","turf","turf_distance","offers_score","hours_score","open_now","popular_now","maxAverageScore","minAverageScore","placesScoredAveraged","likes_score","venue_score","place_vibe_count","aggregate_score","aggregate_rating_count_score","aggregate_rating_score","maxDistance","distance_score","reasons","scores","largestIndex","apply","average_score","reason","placesSortedAndNormalized","icon_size","numPlaces","shuffleTopPicks","reducePlaceProperties","fromEntries","numTop","topPlaces","slice","remainingPlaces","toTitleCase","str","charAt","toUpperCase","nearest_places","radius","places_temp","places_to_return","validate_check_in","threshold","in_jls","bounds_jls","polygon","turf_boolean","in_neighborhood","valid_neighborhoods_id","valid_neighborhoods_name","turf_point","neigh_dist","neighborhood","lng","in_bbox_helper","boundary","bbox","parsed_bbox","bounds","nearest_neighborhood","neighborhoods_ordered","challenge_badges_lookup","challenge_badges","badges","badge","associate_badge","badges_to_check","win_badges","ID","searchCities","newCity","foundCity","searchTags","getAllBoundaries","getBoundary","searchPlacesByName","apiURL","searchParams","perPage","dist","apiResult","suggestPlacesByName","string","context","geoContext","fullURL","name_suggest_context","name_suggest__completion","sortNeighborhoodsByVibes","vibeSlugs","relatedVibeSlugs","getRelatedVibes","vibeSlugsToIntersect","Set","neighborhoodsWithVibeIntersection","neighborhoodVibes","neighborhoodVibeSlugs","vibeIntersection","sortedNeighborhoods","restOfNeighborhood"],"mappings":"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"}