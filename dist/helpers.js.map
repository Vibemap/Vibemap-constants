{"version":3,"file":"helpers.js","sources":["../utils/helpers.js"],"sourcesContent":["import Axios from \"axios\"\nimport axiosRetry from 'axios-retry'\n\nimport querystring from 'querystring'\n\naxiosRetry(Axios, {\n  retries: 3,\n  retryDelay: axiosRetry.exponentialDelay,\n  onRetry: (count, err, config) => {\n    console.log('Axios retrying: ', count, err, config)\n  }\n})\n\n// same object, but with updated typings.\n// TODO: roll back caching until CORS is fixed everywhere.\n//import { setupCache } from 'axios-cache-interceptor'\n//const axios = setupCache(Axios);\nconst axios = Axios\n\nimport dayjs from 'dayjs'\ndayjs.extend(isBetween)\nimport dayjsRecur from 'dayjs-recur'\ndayjs.extend(dayjsRecur)\nimport isBetween from 'dayjs/plugin/isBetween'\n\nimport LinearScale from 'linear-scale'\nimport truncate from 'truncate'\n\nimport * as turf from '@turf/helpers'\nimport turf_distance from '@turf/distance'\nimport turf_boolean from '@turf/boolean-point-in-polygon'\n\nimport * as constants from '../constants/constants.js'\nimport cities from '../constants/cities.json'\nimport neighborhoods from '../dist/neighborhoods.json'\nimport badges from '../dist/badges.json'\n\nimport { getLocationFromPoint, sortLocations, distanceBetweenLocations } from './map'\nimport { getRelatedVibes, getCategoriesByLevel } from './vibes'\nimport { getGroups } from './wordpress'\n\nconst jsonpack = require('jsonpack')\nlet activityCategories = {}\nlet categories_flat = []\n\n// Keep track of which API endpoint domain we are using\nexport const getAPIDomain = (mode = null) => {\n  // Use the mode passed in, or the NODE_ENV\n  const env_mode = process.env.API_ENV\n  const current_mode = mode\n    ? mode\n    : env_mode\n      ? env_mode\n      : 'production'\n\n  const url_production = 'https://api.vibemap.com'\n  const url_staging = 'https://staging.api.vibemap.com'\n  const url_dev = 'http://localhost:9000'\n\n  const domain = current_mode === 'production'\n    ? url_production\n    : current_mode === 'staging'\n      ? url_staging\n      : url_dev\n\n  return domain\n}\n\nconst api_domain = getAPIDomain()\nconst api_version = 'v0.3'\nconst useSearchAPI = true\n\nconst ApiUrl = `${api_domain}/${api_version}/`\n\n// Filters a list of objects\n// Similar to .filter method of array\nexport const filterList = (\n  list = [{ test: 'test', value: 'foo' }, { test: 'test', value: 'bar' }],\n  searchTerm = 'food', key = 'value'\n) => {\n  // Generalize the Semantic UI search implementation\n  const re = new RegExp(searchTerm.replace(/[-[\\]{}()*+!<=:?.\\/\\\\^$|#\\s,]/g, '\\\\$&'), 'i')\n\n  const isMatch = (result) => re.test(result[key])\n\n  const results = list.filter(item => isMatch(item))\n\n  return results\n}\n\nexport const getRandomItem = (list) => {\n  // Get random index value\n  const randomIndex = Math.floor(Math.random() * list.length)\n\n  // Get random item\n  const item = list[randomIndex]\n\n  return item\n}\n\n// TODO: Option to encode / decode\nexport const encodeCardIndex = (row, column) => {\n  // Encode row / column into a decimal for sorting.\n  const index = row + column / 10\n\n  return index\n}\n\n// Counts the number of matches between the two lists and return and integer\nexport const matchLists = (listA, listB) => {\n  let matches = 0\n\n  if (listA.length > 0 && listB.length > 0) {\n    matches = listA.filter((word) => {\n      return listB.includes(word)\n    }).length\n  }\n\n  return matches\n}\n\n// Give a score based on the vibes position in the list.\nexport const rankVibes = (listA, listB) => {\n  let rankings = []\n\n  rankings = listA.map((word) => {\n    let score = 0\n\n    if (listB.includes(word)) {\n      score = listB.length - listB.indexOf(word)\n    }\n\n    return score\n  })\n\n  const average = rankings.reduce((a, b) => a + b, 0) / listB.length\n\n  return average\n}\n\nexport const sortByKey = (a, b) => {\n  console.log('sortByKey (a, b)', a, b)\n  return a\n}\n\nexport const sortByPopularity = (a, b) => {\n  // Sorted by Monthly Search Volumne (MSV)\n  // Handle null or empty msv\n  const aPop = parseInt(a.details.msv ? a.details.msv : 2)\n  const bPop = parseInt(b.details.msv ? b.details.msv : 2)\n\n  return bPop - aPop\n}\n\ntry {\n  const activityCategoriesPacked = require('../dist/activityCategories.zip.json')\n  activityCategories = {\n    activityCategories: jsonpack.unpack(activityCategoriesPacked)\n  }\n\n  categories_flat = activityCategories.activityCategories\n    .sort(sortByPopularity)\n    .map(category => category.name.toLowerCase())\n\n} catch (error) {\n  console.log('Error with packed activityCategories ', error)\n}\n\nexport const sortByArray = (sortedList, sortingArr) => {\n  return sortedList.sort((a, b) => {\n    return sortingArr.indexOf(a) - sortingArr.indexOf(b)\n  })\n}\n\nexport const isClosedToday = (dailyHours) => {\n  return dailyHours.opens === '00:00:00' && dailyHours.closes === '00:00:00'\n}\n\nexport const displayHours = (hours, dayFormat = 'dd') => {\n  let openHours = isOpen(hours)\n  let hasHours = false\n\n  const weeklyHours = hours.find(({ day_of_week }) => day_of_week === 8)\n\n  if (openHours.openEveryday) {\n    let times = []\n    const time =\n      dayjs(openHours.opens).format('ha') +\n      '-' +\n      dayjs(openHours.closes).format('ha')\n    times.push(time)\n\n    let popularFound = hours.find((day) => day.name == 'POPULAR')\n    console.log('Popular at: ', popularFound)\n\n    return times\n  }\n\n  let i = 0\n  let orderedHours = []\n\n  // Check every day of the week.\n  while (i < 7) {\n    // Get Label\n\n    let dayFound = hours.find((day) => day.day_of_week == i)\n    let popularFound = hours.find(\n      (day) => day.day_of_week == i && day.name == 'POPULAR'\n    )\n\n    // TODO: Handle popular vs normal\n    //console.log('Found day and popular times: ', dayFound, popularFound)\n\n    let isClosed = false\n\n    if (dayFound !== undefined) {\n      isClosed = isClosedToday(dayFound)\n\n      // We have some hours for the place\n      if (!isClosed) hasHours = true\n      //console.log('Day has hours: ', i, dayFound, popularFound, hasHours)\n    }\n\n    // If found and not closed\n    if (dayFound === undefined || isClosed) {\n      //const displayHours = helpers.displayHours(dayFound)\n      // Will with daily hours if available\n      if (!isClosed && weeklyHours !== undefined) {\n        // Set for current day\n        let time = Object.assign({}, weeklyHours)\n        time.day_of_week = i\n        orderedHours.push(time)\n        // Include closed days as closed\n      } else {\n        orderedHours.push({ day_of_week: i, closed: true })\n      }\n    } else {\n      dayFound.closed = false\n      orderedHours.push(dayFound)\n    }\n    i++\n  }\n\n  // TODO: Add patterns for nicer formating.\n  // TODO: Handle localization and React templates\n  let formattedHours = orderedHours.map((dailyHours) => {\n    //console.log('formattedHours for: ', dailyHours)\n    // Shift days by 1; Monday = 1; Sunday = 0\n    const day = (dailyHours.day_of_week + 1) % 7\n\n    if (dailyHours.closed === true) {\n      return dayjs().day(day).format(dayFormat) + ': ' + 'Closed'\n    } else {\n      const opens = dailyHours.opens.split(':')\n      const closes = dailyHours.closes.split(':')\n\n      const time =\n        dayjs().day(day).format(dayFormat) +\n        ': ' +\n        dayjs().hour(opens[0]).minute(opens[1]).format('ha') +\n        '-' +\n        dayjs().hour(closes[0]).minute(closes[1]).format('ha')\n\n      return time\n    }\n  })\n\n  return formattedHours\n}\n\nexport const isOpen = (hours, time = dayjs()) => {\n  const day = time.day()\n  const date = time.format('YYYY-MM-DD')\n  const hour = time.hour()\n\n  if (!hours) return { openNow: false, openToday: false, isPopular: false }\n\n  let dayFound = hours.find(({ day_of_week }) => day_of_week === day)\n\n  // TODO: not true if it's closed one day\n  const hasDailyHours = hours.find(({ day_of_week }) => day_of_week === 8)\n\n  const daysClosed = hours.filter((day) => isClosedToday(day))\n\n  const openEveryday = hasDailyHours !== undefined && daysClosed.length == 0\n\n  // If open everyday and no specific hours for current day\n  if (openEveryday !== undefined && dayFound === undefined) {\n    dayFound = hasDailyHours\n  }\n\n  if (dayFound) {\n    const opens = dayjs(date + ' ' + dayFound.opens)\n    const closes = dayjs(date + ' ' + dayFound.closes)\n\n    // Return if open and if it's a popular time\n    const openNow = time.isBetween(opens, closes)\n    const isPopular = openNow && dayFound.name === 'POPULAR'\n    const hoursToday = opens.format('ha') + ' - ' + closes.format('ha')\n\n    return {\n      openNow: openNow,\n      openToday: true,\n      openEveryday: openEveryday,\n      opens: opens,\n      closes: closes,\n      isPopular: isPopular,\n    }\n  } else {\n    return {\n      openNow: false,\n      openToday: false,\n      openEveryday: false,\n      isPopular: false,\n    }\n  }\n}\n\nexport const parseDateTime = (datetime) => {\n  const date = datetime ? dayjs(datetime) : null\n  return date\n}\n\nexport const formatDateTime = (\n  datetime,\n  formatHtml = false,\n  showDayOfWeek = false\n) => {\n  if (datetime) {\n    if (typeof (datetime) == 'string') datetime = parseDateTime(datetime)\n\n    const month = datetime.format('MMM')\n    const day = datetime.format('D')\n    const weekday = datetime.format('ddd')\n    const hour = datetime.format('ha')\n    const dateFormated = `${showDayOfWeek ? weekday : null} ${month} ${day} ${hour}`\n\n    return dateFormated\n  } else {\n    return null\n  }\n}\n\nexport const getCardOptions = (block) => {\n  let postData = block.singCards.posts\n\n  let {\n    categoryQuery,\n    distanceQuery,\n    geoQuery,\n    placeType,\n    searchQuery,\n    vibeQuery } = postData[0]\n\n  // If a vibe override query is present\n  if (block.overrideQuery && block.overrideQuery.vibe) vibeQuery = block.overrideQuery.vibe\n\n  // Use city as a back up\n  if (block.overrideQuery && block.overrideQuery.cities && block.overrideQuery.cities.length > 0) {\n    const selectedCity = cities.filter(result => result.slug === block.overrideQuery.cities[0])\n\n    // TODO: Update this programatically from Wordpress\n    const cityRadius = 7\n    geoQuery = geoQuery ? geoQuery : selectedCity[0].location\n    distanceQuery = distanceQuery ? distanceQuery : cityRadius\n  }\n\n  if (block.overrideQuery && block.overrideQuery.location) {\n    geoQuery = block.overrideQuery.location\n\n    distanceQuery = block.overrideQuery.distance ? block.overrideQuery.distance : distanceQuery\n  }\n\n  // If no city or override are passed, make Oakland default\n  if (!geoQuery) {\n    const firstCity = cities.filter(result => result.slug === 'oakland')\n    geoQuery = firstCity[0].location\n  }\n\n  if (typeof vibeQuery === 'string') vibeQuery = vibeQuery.replace(/\\s/g, '').split(\",\") // Cast comma-separated list to array\n\n  // Map all the vibe slug to a list that includes related vibes.\n  const vibesFromCategories = vibeQuery ? vibeQuery.map(vibe => typeof (vibe) === 'string' ? vibe : vibe.slug) : []\n\n  // TODO: Move get relateed vibes to the backend or front end, not here.\n  //const allVibes = vibes.getRelatedVibes(vibesFromCategories)\n\n  let cardOptions = {\n    category: categoryQuery,\n    distance: distanceQuery,\n    point: geoQuery.longitude + ',' + geoQuery.latitude,\n    ordering: 'vibe',\n    search: searchQuery,\n    vibes: vibesFromCategories\n  }\n\n  return cardOptions\n\n}\n\nexport const getAPIParams = (options, per_page = 150, includeRelated = false) => {\n  let { activity, distance, point, vibes } = options\n  let params = Object.assign({}, options)\n\n  let distanceInMeters = 1\n  if (distance > 0)\n    distanceInMeters = Math.round(distance * constants.METERS_PER_MILE)\n\n  // API currently doesn't support other options\n  // However, the sorting algorithm, will use them\n  params['ordering'] = options.ordering\n    ? options.ordering\n    : '-aggregate_rating'\n\n  // TODO: Load more points at greater distances?\n  params['per_page'] = per_page\n\n\n  const coords = point.split(',')\n  const lat = coords[1]\n  const lon = coords[0]\n\n  if (useSearchAPI) {\n    if (params.activity) {\n      params['categories'] = activity\n    }\n\n    if (params.vibes) {\n      params[':vibes.raw__in'] = vibes\n      delete params['vibes']\n    }\n\n    if (params.category) {\n      params['categories.raw__in'] = params.category.toLowerCase().split()\n    }\n\n    if (params.distance) {\n      params['location__geo_distance'] = `${distanceInMeters}m__${lat}__${lon}`\n      delete params['distance']\n    }\n\n    if (params.search && params.search.length > 0) {\n      // FIXME: Make sure searchess ues the right ordering method in Elastic      \n      // FIXME: Check if search term matches any tags or categories with a high thresdhold\n      let example_tag = 'east bay open studios'\n      if (example_tag.includes(params.search)) {\n        params.editorial_category = \"EastBayOpenStudios\"\n      }\n      delete params['ordering']\n      delete params[':vibes.raw__in']\n    }\n\n    if (params.editorial_category) {\n      const term = params.editorial_category\n      params['editorial_categories.raw__wildcard'] = `*${term}*`\n      delete params['editorial_category']\n    }\n\n    params['is_chain'] = options.is_chain ? options.is_chain : false\n    params['is_closed'] = options.is_closed ? options.is_closed : false\n    params['is_destination'] = options.is_destination ? options.is_destination : false\n\n    // TODO: there's probably an easier way to set these rules on the backend.\n    if (params.city) {\n      params['city.raw__contains'] = params.city\n      delete params['city']\n    }\n\n    if (params.per_page) {\n      params['page_size'] = params.per_page\n      delete params['per_page']\n    }\n  }\n\n  // Rename args\n  if (activity !== 'all' && activity !== null) params['category'] = activity\n  params['dist'] = distanceInMeters\n  delete params['activity']\n  delete params['distance']\n  delete params['bounds']\n\n  // Cleanup empty args\n  if (params.city == null) delete params['city']\n  if (params.category == null || params.category == 'all' || params.category.length == 0) delete params['category']\n  if (params.editorial_category == null) delete params['editorial_category']\n  if (params.search == null) delete params['search']\n  if (params.vibes == null || params.vibes.length == 0) delete params['vibes']\n  if (includeRelated == false) delete params['relatedVibes']\n  //console.log('distanceInMeters', distanceInMeters, params['dist'])\n\n  return params\n}\n\n// Return all matching Vibemap categories\nexport const getCategoryMatch = (categories = ['all']) => {\n  const all_categories = activityCategories.activityCategories.map(\n    (category) => category.slug\n  )\n\n  let matches = []\n  /* TODO: use a combination of filter & map */\n  categories.map((category) => {\n    if (all_categories.includes(category)) {\n      matches.push(category)\n    }\n    return true\n  })\n\n  return matches\n}\n\n// Parse all variety of social links and return a consistent, valid url\nexport const getFullLink = (link, type = 'instagram') => {\n  const domains = {\n    instagram: 'https://instagram.com/',\n    twitter: 'https://twitter.com/',\n    facebook: 'https://facebook.com/',\n  }\n\n  // Handle things that aren't valid string handles\n  // TODO: add unit tests for link = null; link = '' and other cases\n  if (link === null || link === '') return null\n\n  const parse_url = url.parse(link)\n\n  // TODO: Just use the native URL methods:\n  let url = new URL(link)\n  //const path = url.pathname\n\n\n  // Only the path handle\n  const path = parse_url.path.replace('/', '')\n\n  // Combine domain and handle\n  const full_link = domains[type] + path\n\n  return full_link\n}\n\n// Give a city object return it's center coordinates as an array\nexport const geLocationFromCity = (city) => {\n  // Handles both the object form the CMS and vibemap-constants\n  // TODO: Consolidate to just vibemap-constants\n  const centerPoint = city.cityDetails\n    ? city.cityDetails.placemarker\n    : city.location\n      ? city.location\n      : null\n\n  return centerPoint\n}\n\nexport const getMax = (items, attribute) => {\n  let max = 0\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value > max) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nexport const getMin = (items, attribute) => {\n  let min = 100\n  items.forEach((item) => {\n    let value = item['properties'][attribute]\n    if (value < min) {\n      min = value\n    }\n  })\n\n  return min\n}\n\n// Adapted from https://gist.github.com/James1x0/8443042\nexport const getTimeOfDay = (time) => {\n  var time_of_day = null //return g\n\n  //if we can't find a valid or filled moment, we return.\n  if (!time || !time.isValid()) {\n    return\n  }\n\n  var split_afternoon = 12 // 24hr time to split the afternoon\n  var split_evening = 17 // 24hr time to split the evening\n  var currentHour = parseFloat(time.format('HH'))\n\n  if (currentHour >= split_afternoon && currentHour <= split_evening) {\n    time_of_day = 'afternoon'\n  } else if (currentHour >= split_evening) {\n    time_of_day = 'evening'\n  } else {\n    time_of_day = 'morning'\n  }\n\n  return time_of_day\n}\n\n\nconst getTopLocations = (places, location_type = 'city', flat = false) => {\n  let top_locations = {};\n\n  places.map(place => {\n    // Only use city name, not state or country\n    const location = place.properties[location_type]\n\n    if (location != null && location != 'null') {\n      const name = location.split(',')[0]\n\n      if (top_locations.hasOwnProperty(location)) {\n        top_locations[name] += 1;\n      } else {\n        top_locations[name] = 1;\n      }\n    }\n\n    return null\n  });\n\n  var sortable = [];\n  for (var location in top_locations) {\n    sortable.push([location, top_locations[location]]);\n  }\n\n  let top_locations_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  });\n\n  const locations = flat\n    ? top_locations_sorted.map((location) => location[0])\n    : top_locations_sorted\n  return locations\n}\n\nexport const getTopVibes = (places, flat = false) => {\n  let top_vibes = {}\n\n  places.map((place) => {\n    place.properties.vibes.map((vibe) => {\n      if (top_vibes.hasOwnProperty(vibe)) {\n        top_vibes[vibe] += 1\n      } else {\n        top_vibes[vibe] = 1\n      }\n      return null\n    })\n    return null\n  })\n\n  var sortable = []\n  for (var vibe in top_vibes) {\n    sortable.push([vibe, top_vibes[vibe]])\n  }\n\n  let top_vibes_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  })\n\n  const vibes = flat ? top_vibes_sorted.map((vibe) => vibe[0]) : top_vibes_sorted\n\n  return vibes\n}\n\nexport const getTopCategories = (places, attribute = 'categories') => {\n  let top_categories = {};\n\n  places.map((place) => {\n    place.properties[attribute].map((item) => {\n      if (top_categories.hasOwnProperty(item)) {\n        top_categories[item] += 1;\n      } else {\n        top_categories[item] = 1;\n      }\n      return null\n    });\n    return null\n  });\n\n  var sortable = [];\n  for (var item in top_categories) {\n    sortable.push([item, top_categories[item]]);\n  }\n\n  let top_categories_sorted = sortable.sort(function (a, b) {\n    return b[1] - a[1]\n  });\n\n  return top_categories_sorted\n}\n\nexport const getWaveFromVibe = (vibe) => {\n  switch (vibe) {\n    case 'buzzing':\n      return 'high'\n    default:\n      return 'medium'\n  }\n\n  //console.log('Get wave level for vibe: ', vibe, waveLevel)\n\n  return waveLevel\n}\n\nexport const graphToEvents = (edges = []) => {\n  const events = edges.map(edge => {\n    const groupEvent = edge.node\n    const details = groupEvent.groupDetails\n\n    const name = details.name\n    const link = details.link\n    const slug = groupEvent.slug\n    const description = details.description\n    // TODO: Handle multiple images\n    const image = details.image\n      ? details.image.url\n      : null\n    const images = [{\n      url: image,\n      original: image\n    }]\n    const location = details.map\n    const price = details.price ?\n      details.price :\n      `free`\n\n    const vibes = details.vibes ?\n      details.vibes.map(vibe => vibe.slug) : []\n\n    const recurring = details.recurring\n    const recurrence = details.recurrence\n    const which = details.which\n    const day = details.day.value\n\n    const startTime = details.startTime ?\n      details.startTime :\n      `00:00`\n    const endTime = details.startTime ?\n      details.endTime :\n      `00:00`\n\n    const recurRule = nextDateFromRecurring(recurrence, day, which)\n\n    const nextStartTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, startTime))\n\n    const nextEndTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, endTime))\n\n    const event = {\n      id: slug,\n      title: name,\n      geometry: {\n        type: \"Point\",\n        coordinates: [-122.26747099999956, 37.81396520000001]\n      },\n      dateTime: nextStartTime,\n      image: images,\n      card_type: 'event',\n      properties: {\n        name: name,\n        title: name,\n        url: link,\n        address: location && location.streetAddress,\n        categories: [],\n        city: details.cities && details.cities[0].slug,\n        description: description,\n        is_online: false,\n        images: [],\n        hotspots_place: location,\n        location: location,\n        start_date: nextStartTime,\n        end_date: nextEndTime,\n        vibemap_images: images,\n        likes: 10,\n        price: price,\n        recurs: true,\n        vibes: vibes\n      }\n    }\n\n    return event\n  })\n\n  return events\n}\n\nexport const groupsToEvents = (groups = []) => {\n  const events = groups.map(groupEvent => {\n    //const groupEvent = edge.node\n    const details = groupEvent.acf\n\n    const name = details.name\n    const link = details.link\n    const slug = groupEvent.slug\n    const description = details.description\n    // TODO: Handle multiple images\n    const image = details.image && details.image.url\n    const images = image\n      ? [{\n        url: image,\n        original: image\n      }]\n      : []\n\n    const location = details.map\n    const price = details.price ?\n      details.price :\n      `free`\n\n    const vibes = details.vibes ?\n      details.vibes.map(vibe => vibe.slug) : []\n\n    const recurring = details.recurring\n    const recurrence = details.recurrence\n    const which = details.which\n    const day = details.day && details.day.label\n      ? details.day.label\n      : `sunday`\n\n    const startTime = details.start_time ?\n      details.start_time :\n      `00:00`\n    const endTime = details.end_time ?\n      details.end_time :\n      `00:00`\n\n    const recurRule = nextDateFromRecurring(recurrence, day, which)\n\n    const nextStartTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, startTime))\n\n    const nextEndTime = dayjs(recurRule.next(1).toLocaleString()\n      .replace(`00:00:00`, endTime))\n\n    const event = {\n      id: slug,\n      title: name,\n      geometry: {\n        type: \"Point\",\n        coordinates: [-122.26747099999956, 37.81396520000001]\n      },\n      dateTime: nextStartTime.toISOString(),\n      image: images,\n      card_type: 'event',\n      properties: {\n        name: name,\n        title: name,\n        url: link,\n        address: location && location.streetAddress,\n        categories: [],\n        city: details.cities && details.cities[0].slug,\n        description: description,\n        is_online: false,\n        images: images,\n        hotspots_place: location,\n        location: location,\n        start_date: nextStartTime.toISOString(),\n        end_date: nextEndTime.toISOString(),\n        vibemap_images: images,\n        likes: 10,\n        price: price,\n        recurs: true,\n        vibes: vibes\n      }\n    }\n\n    return event\n  })\n\n  return events\n}\n\n// This function is no longer utilized. Linear scale from 0 to 10\nexport const normalize = (val, min, max) => {\n  return ((val - min) / (max - min)) * 10\n}\n\n/* New flexible linear scaling function. Using d3.scaleLinear, a value (val) between\nmin and max is scaled appropriately to value between scale_low and scale_high\n*/\nexport const normalize_all = (val = 500, min = 1, max = 100, scale_low = 1, scale_high = 10) => {\n\n  const scale = LinearScale().domain([min, max]).range([scale_low, scale_high])\n  //console.log(`linear-scale result `, scale(val))\n\n  return scale(val)\n}\n\n// TODO Function for scaling icon. Currently bug (likely in clustering) where certain icon's become very small\nexport const scaleIconSize = (score = 5, min = 1, max = 100) => {\n  const minSize = 1\n  const maxSize = 5\n\n  // TODO: Test and replace\n  //const d3_scale = scaleLinear().domain([min, max]).range([1, 5])\n\n  const scale = LinearScale()\n    .domain([min, max])\n    .range([minSize, maxSize])\n\n  const iconSize = scale(score)\n\n  return iconSize\n}\n\nexport const scaleMarker = (score = 50, min = 0, max = 100, zoom = 14) => {\n  // TODO: Hack to catch empty/nan scores\n  if (isNaN(score)) score = 3.5\n\n  const marker_scale = LinearScale()\n    .domain([8, 20])\n    .range([10, 30])\n\n\n  let base_marker = marker_scale(zoom)\n  let max_marker = base_marker * 3\n\n  let scale = LinearScale()\n    .domain([0, max])\n    .range([base_marker, max_marker])\n\n  let scaled_size = Math.round(scale(score))\n\n  return scaled_size\n}\n\n// Maps the relative density of place to a known range for Vibemap's cities\nexport const scaleDensityArea = (density = 10, area = 100) => {\n  // TODO: Make these contants?\n  let density_scale = LinearScale()\n    .domain([1, 60, 1000])\n    .range([0, 0.8, 1])\n\n  let relative_density = density_scale(density)\n\n  return relative_density\n}\n\nexport const scaleDensityBonus = (relative_density) => {\n  let inverted_scale = LinearScale()\n    .domain([0, 1])\n    .range([constants.HEATMAP_INTENSITY * 2, constants.HEATMAP_INTENSITY])\n\n  const withBonus = inverted_scale(relative_density)\n  return withBonus\n}\n\nexport const scaleScore = (score = 2) => {\n  let scale = LinearScale()\n    .domain([0, 5])\n    .range([60, 100])\n\n  let percentage = Math.round(scale(score))\n\n  return percentage\n}\n\nexport const scaleSelectedMarker = (zoom) => {\n  // Scale em size of svg marker to zoom level\n  let scale = LinearScale()\n    .domain([8, 12, 20]) // Zoom size\n    .range([0.1, 1.2, 4]) // Scale of marker size\n\n  let scaled_size = Math.round(scale(zoom))\n\n  return scaled_size\n}\n\nexport const getEventOptions = (\n  city = 'oakland',\n  date_range = 'quarter',\n  distance = 10,\n  category = null,\n  vibes = [],\n  search\n) => {\n  const locations = cities.concat(neighborhoods)\n  const selectedLocation = locations.filter(result => result.slug === city)\n  // FIXME: Why is the location sometimes missing\n  const location = selectedLocation ? selectedLocation[0].location : cities[0]\n\n  const today = dayjs()\n  const dayOfWeek = today.day() + 1\n\n  let day_start = today.startOf('day')\n\n  let startOffset = 0\n  let endOffset = 0\n\n  switch (date_range) {\n    case 'day':\n      endOffset = 1\n      break;\n\n    case 'weekend':\n      endOffset = 7 - dayOfWeek\n      break;\n\n    case 'next_week':\n      startOffset = 8 - dayOfWeek\n      endOffset = 7\n      break;\n\n    case 'month':\n      const monthEnd = today.endOf('month')\n      endOffset = monthEnd.diff(today, 'day')\n      break;\n\n    case 'quarter':\n      endOffset = 90\n      break;\n  }\n\n  let date_range_start = today.add(startOffset, 'day').startOf('day')\n  let date_range_end = today.add(endOffset, 'day').endOf('day') //  TODO Plus range\n  //console.log('DEBUG: date_range_start, date_range_end: ', date_range, date_range_start.toString(), date_range_end.format(\"YYYY-MM-DD HH:MM\"));\n\n  let options = {\n    activity: category,\n    category: category,\n    distance: distance,\n    point: location.longitude + ',' + location.latitude,\n    ordering: '-score_combined',\n    start_date_after: date_range_start.format(\"YYYY-MM-DD HH:MM\"),\n    end_date_before: date_range_end.format(\"YYYY-MM-DD HH:MM\"),\n    search: search,\n    vibes: vibes\n  }\n\n  // Don't pass empty/null params\n  if (options.category == null || options.category == 'all' || options.category.length == 0) delete options['category']\n  if (options.search == null) delete options['search']\n  if (options.vibes == null || options.vibes.length == 0) delete options['vibes']\n\n  return options\n}\n\nexport const fetchEvents = async (\n  // Defaults for testing\n  options = {\n    distance: 20,\n    point: `-122.269994,37.806507`\n  },\n  activitySearch = false,\n  recurringSearch = false\n) => {\n  //console.log('fetchEvents: activitySearch, recurringSearch', activitySearch, recurringSearch);\n\n  let {\n    activity,\n    bounds,\n    category,\n    days,\n    distance,\n    ordering,\n    point,\n    search,\n    time,\n    vibes,\n  } = options\n\n  let centerPoint = point.split(',').map((value) => parseFloat(value))\n  let currentLocation = getLocationFromPoint(centerPoint)\n  let distanceInMeters = distance * constants.METERS_PER_MILE\n\n  let day_start = dayjs().startOf('day').format('YYYY-MM-DD HH:MM')\n  let day_end = dayjs().add(days, 'days').format('YYYY-MM-DD HH:MM')\n\n  if (activitySearch && category) {\n    options.search = `${category ? category : ''} ${search ? search : ''}`\n  }\n\n  const nearestCities = sortLocations(cities, currentLocation)\n  const city = nearestCities && nearestCities.length > 0\n    ? nearestCities[0].name\n    : null\n\n  const params = module.exports.getAPIParams(options)\n  //const searchParams = new URLSearchParams(params)\n  //let query = searchParams.toString()\n  let query = querystring.stringify(params)\n\n  const apiEndpoint = `${ApiUrl}events/`\n  const source = axios.CancelToken.source()\n\n  let response = await axios.get(`${apiEndpoint}?${query}`, {\n    cancelToken: source.token,\n  }).catch(function (error) {\n    // handle error\n    console.log('Axios error ', error.response && error.response.statusText)\n\n    return {\n      data: [],\n      count: 0,\n      top_vibes: null,\n      loading: false,\n      timedOut: false\n    }\n  })\n\n  // TODO: How to filter by location and category / vibe\n  if (recurringSearch) {\n    const groups = await getGroups({ city: city ? city : '' })\n    const recurringGroupEvents = groupsToEvents(groups.data)\n\n    response.data.results.features = recurringGroupEvents.concat(response.data.results.features)\n  }\n\n  return response\n}\n\nconst nextDateFromRecurring = (...[\n  recurrence,\n  day,\n  which\n]) => {\n  const date = dayjs() // .startOf('month')\n  const ordinals = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"]\n  const whichDay = ordinals.indexOf(which)\n  const weekOfMonth = whichDay > 0 ? whichDay : 0\n\n  // TODO: Handle daily, quarterly, yearly\n  // And pass this same util to the details page\n  const recurRule = recurrence == `monthly` ?\n    date.recur()\n      .every(day).daysOfWeek() // By day name\n      .every([weekOfMonth]).weeksOfMonthByDay() // By which week of the month\n    :\n    date.recur()\n      .every(day).daysOfWeek() // Same day every week\n\n  return recurRule\n}\n\nexport const fetchPlacesDetails = async (id, type = 'place') => {\n  const source = axios.CancelToken.source()\n  let apiEndpoint\n  let category = \"\"\n\n  if (type == \"event\") {\n    apiEndpoint = `${ApiUrl}events/`\n    category = `Event`\n  }\n\n  if (type == \"place\") {\n    apiEndpoint = `${ApiUrl}places/`\n    category = `Place`\n  }\n\n  if (apiEndpoint) {\n    const response = await axios.get(`${apiEndpoint}${id}`, {\n      cancelToken: source.token,\n    }).catch(function (error) {\n      // handle error\n      console.log('axios error ', error && error.statusText);\n      return null\n    })\n\n    let subcategory = category\n\n    return response\n  }\n}\n\n// Fetch Places from API with query params including\n// - categories\n// - vibes\n// - search\nexport const fetchPlacePicks = async (\n  options = {\n    distance: 5,\n    point: '-123.1058197,49.2801149',\n    ordering: '-score_combined',\n    vibes: ['chill'],\n    preferredVibes: [],\n    relatedVibes: [] // TODO: Separate query by * score by\n  }\n) => {\n  let {\n    activity,\n    bounds,\n    category,\n    days,\n    distance,\n    is_chain = false,\n    is_closed = false,\n    is_destination = false,\n    ordering,\n    per_page,\n    point,\n    search,\n    time,\n    vibes,\n    preferredVibes,\n    relatedVibes,\n    useNearest = false,\n    useBoundaries = false\n  } = options\n\n  let distanceInMeters = 1\n  if (distance > 0) distanceInMeters = distance * constants.METERS_PER_MILE\n  if (activity === 'all') activity = null\n\n  const scoreBy = ['aggregate_rating', 'vibes', 'distance', 'offers', 'hours']\n  const numOfPlaces = per_page ? per_page : 100\n  const hasVibes = vibes && vibes.length > 0\n\n  let centerPoint = point.split(',').map((value) => parseFloat(value))\n  let currentLocation = getLocationFromPoint(centerPoint)\n  const nearestCities = sortLocations(cities, currentLocation)\n  const distanceFrom = distanceBetweenLocations(nearestCities[0].location, currentLocation)\n\n  // Use city if nearby, for better caching\n  if (useNearest && distanceFrom < 20) {\n    const city = nearestCities[0]\n    options.point = city.centerpoint.join(',')\n  }\n\n  const apiEndpoint = useSearchAPI\n    ? ApiUrl + 'search/places'\n    : ApiUrl + 'places/'\n  const source = axios.CancelToken.source()\n\n  let response = {}\n  const getPlaces = async (options) => {\n    const params = getAPIParams(options, numOfPlaces)\n    let query = querystring.stringify(params)\n    console.log(`Places search query is `, `${apiEndpoint}?${query}`);\n\n    response = await axios.get(`${apiEndpoint}?${query}`, {\n      cancelToken: source.token,\n    }).catch(function (error) {\n      // handle error\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return {\n        data: [],\n        count: 0,\n        query: '?' + query,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n    return response\n  }\n\n  response = await getPlaces(options)\n\n  const count = response.data.count\n\n  // FIXME: Workaround to retry with search\n  if (count == 0 && hasVibes) {\n    let newOptions = Object.assign({}, options)\n    newOptions.search = vibes[0]\n    newOptions.vibes = []\n\n    response = await getPlaces(newOptions)\n    //response = await\n  }\n\n  const placeResults = response.data && response.data.results && response.data.results.features\n    ? response.data.results.features\n    : []\n\n  let places = formatPlaces(placeResults)\n  //console.log('Got reponse ', response.data)\n\n  const vibesQuery = vibes ? vibes : []\n\n  // TODO: Consider scoring related vibe differently\n  const vibesCombined = vibesQuery\n    .concat(preferredVibes ? preferredVibes : [])\n\n  const newOptions = {\n    ...options,\n    relatedVibes: relatedVibes\n  }\n\n  // TODO: Incorporate personalized vibe score for user\n  let placesScoredAndSorted = scorePlaces(\n    places,\n    centerPoint,\n    vibesCombined,\n    scoreBy,\n    ordering,\n    options && options.shouldShuffle\n      ? options.shouldShuffle\n      : false,\n    newOptions // Pass any overrides\n  )\n\n  const top_categories = getTopCategories(places)\n  const top_vibes = getTopVibes(places)\n  const top_locations = getTopLocations(places)\n\n  return {\n    data: placesScoredAndSorted,\n    count: count,\n    top_categories: top_categories,\n    top_locations: top_locations,\n    top_vibes: top_vibes,\n    loading: false,\n    timedOut: false,\n  }\n}\n\nexport const fetchPlacesFromSearch = async (location) => {\n  const endpoint = 'https://dev.vibemap.com/search_places'\n  const query = ''\n  const params = new URLSearchParams([\n    ['query', query],\n    ['latitude', location.latitude],\n    ['longitude', location.longitude]\n  ])\n\n  const response = await axios.get(`${endpoint}?${params.toString()}`)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n\n      return {\n        data: [],\n        count: 0,\n        query: '?' + query,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n  return response\n}\n\nexport const fetchPlacesFromIds = async (\n  ids = [\n    '740b43a4-3925-4413-9414-fff9d8d16932',\n    'c8262c66-1a83-4d4b-a3e6-8710864ffd1f'\n  ]\n) => {\n  // Param pattern is like this ?ids={id1}__{id2}\n  const endpoint = ApiUrl + '/search/places'\n\n  params = new URLSearchParams([\n    ['ids', ids.join('__')]\n  ])\n\n  const response = await axios.get(`${endpoint}?${params.toString()}`)\n    .catch(function (error) {\n      console.log('axios error ', error.response && error.response.statusText);\n      return {\n        data: [],\n        error: error,\n        count: 0,\n        query: '?' + params,\n        top_vibes: null,\n        loading: false,\n        timedOut: false,\n      }\n    })\n\n  const count = response.data.count\n  const placeResults = response.data && response.data.results && response.data.results.features\n    ? response.data.results.features\n    : []\n\n  return {\n    data: placeResults,\n    count: count,\n    loading: false,\n    timedOut: false,\n  }\n}\n\n// Handle fields from the tile server\nexport const decodePlaces = (places) => {\n  const decoded = places.map((feature) => {\n    //console.log('feature: ', feature)\n    feature.properties.vibes = JSON.parse(feature.properties.vibes)\n    feature.properties.subcategories = JSON.parse(\n      feature.properties.subcategories\n    )\n    feature.properties.categories = JSON.parse(feature.properties.categories)\n    feature.properties.vibemap_images = []\n    feature.properties.images = [feature.properties.thumbnail_url]\n    if (feature.properties.opening_hours != undefined)\n      feature.properties.opening_hours = JSON.parse(\n        feature.properties.opening_hours\n      )\n    delete feature.properties.tips\n    //delete feature.properties.subcategories\n    delete feature.properties.facebook\n    delete feature.properties.telephone\n    delete feature.properties.website\n\n    return feature\n  })\n\n  return decoded\n}\n\n// Do some post-parsing clean up to the data\n// TODO: API Update for Places\nexport const formatPlaces = (places = []) => {\n  // TODO: Replace with activityCategories\n  \n  // FIXME: Make this flat level 1 categories\n  const categories = categories_flat\n  const categories_top_flat = getCategoriesByLevel(2).map(category => category.slug)\n\n  const formatted = places.map((place) => {\n    let fields = place.properties\n    // Add fields for presentation\n    fields.place_type = 'places'\n    fields.short_name = truncate(fields.name, constants.TRUCATE_LENGTH)\n    fields.aggregate_rating = parseFloat(fields.aggregate_rating)\n    if (fields.aggregate_rating_count == null) {\n      fields.aggregate_rating_count = 1\n    }\n    fields.num_vibes = fields.vibes.length\n\n    fields.sub_categories = fields.sub_categories\n    fields.top_vibe = null\n\n    const matchingCategories = fields.categories\n      .map(category => {\n        if (category == 'Drink') category = 'Drinking'\n        return category.toLowerCase()\n      })\n      .filter(category => categories_top_flat.includes(category.toLowerCase()))\n\n    const sortedCategories = sortByArray(matchingCategories, categories)\n    \n    if (fields.categories === undefined ||\n      fields.categories.length === 0) {\n      fields.categories = ['place']\n    }\n\n    // TODO: Add proper theming\n    const theme = 'light'\n    const icon_label = sortedCategories[0] ? sortedCategories[0] : 'dot'\n    fields.icon = sortedCategories[0] ? `icon_${icon_label}_${theme}` : icon_label\n    fields.cluster = null\n    console.log('DEBUG fields.icon: ', fields.icon)\n\n    place.properties = fields\n    return place\n  })\n  return formatted\n}\n\nexport const vibesFromPlaces = (places) => {\n  const vibes = []\n  // TODO: get frequency of vibes from a set of places\n  return vibes\n}\n\nexport const getRecommendedVibes = (vibes) => {\n  const recommended = []\n  // Find related and recommended vibes for the given set.\n  return recommended\n}\n\nexport const scorePlaces = (\n  places,\n  centerPoint,\n  vibes = [],\n  scoreBy = ['vibes', 'aggregate_rating', 'distance'],\n  ordering,\n  shuffle = true,\n  zoom = 12,\n  options = {}\n) => {\n  //console.log('scorePlaces: ', places, ordering, scoreBy)\n\n  // Default max values; These will get set by the max in each field\n  let maxScores = {}\n\n  // Bonuses between 1 and 10\n  // TODO reconfigure bonus scores in a way that is more mathematically sound\n  // to use zoom-weight scaling\n\n  const vibeMatchBonus = 10\n  const vibeRelatedBonus = 2\n  const vibeOrderBonus = 1\n  const vibeAmountBonus = 2\n  const offerBonus = 2\n  const imageBonus = 2\n  const openBonus = 0.5\n  const popularBonus = 5\n\n  // TODO: If ordered by vibe, rank matches very high\n  const vibeRankBonus = ordering == 'vibe' ? 30 : 20\n\n  // ⚡ \tFirst, initialize the scoring fields\n  //\t\tDefaults should be on extreme ends to prevent logical errors\n  let minScores = {};\n\n  scoreBy.map((field) => (maxScores[field] = 0.00001))\n  // Default min values; These will get set by the min in each field\n  scoreBy.map((field) => (minScores[field] = Infinity))\n\n  // Default any zoom level less than ten to be ten, not useful to weigh distance at that point\n  let zoom_to_use = zoom <= 10 ? 10 : zoom;\n  let zoom_norm = normalize_all(zoom_to_use, 10, 20, 0, 10)\n\n  // Logistic growth equation. Max weight is 8, minimum of 1. Weight grows exponentially in the middle range\n  // TODO: pull this out into own function, allows us to weigh distance differently depending on zoom\n  let zoom_weight = 8 / (1 + (7 * (Math.exp(1) ** (-0.7 * zoom_norm))))\n\n  // Weight distance & rating different than other fields\n  // TODO: Make everything a consitent 1-10 scale\n  let weights = {\n    category: 0,\n    vibe: 10,\n    distance: zoom_weight,\n    rating: 4,\n    hours: 0,\n    offers: 0,\n  }\n\n  // If there are vibes, weigh the strongest by 3x\n  // if (vibes.length > 0 && ordering === 'relevance') weights.vibe = 2\n  // Do the same for other sorting preferences\n  if (ordering !== 'relevance') weights[ordering] += 3\n\n  // Get scores and max in each category\n  const placesScored = places.map((place) => {\n    let fields = place.properties\n    fields.stats = {}\n\n    // Give place a vibe score\n    // TODO: Calculate `vibe_score` on backend with stored procedure.\n    // TODO: Make a separate, modular method\n    if (scoreBy.includes('vibes')) {\n      let [vibeMatches, relatedVibeMatches, averageRank, vibeBonus] = [0, 0, 0, 0]\n\n      fields.vibes_score = 0\n      // TODO: TEMP until events return vibes\n      if (fields.vibes === undefined) fields.vibes = ['chill']\n\n      // Based off logrithmic scale, a place with 20 vibes isn't that much (twice) better than one with 10\n      const scoreVibeLength = fields.vibes.length > 0\n        ? vibeAmountBonus * Math.log10(fields.vibes.length)\n        : 0\n\n      if (fields.vibes.length > 0) fields.vibes_score = scoreVibeLength\n\n      // Don't show markers without photos; this will analyze the vibe and quality of the image\n      //Reward photos logrithmically as well. Log indicates scaling behavior, coefficient the weight\n      if (fields.images && fields.images.length > 0) vibeBonus += fields.images.length > 0\n        ? imageBonus * Math.log10(fields.images.length)\n        : 0\n\n      // Give direct vibe matches bonus points\n      if (vibes && vibes.length > 0 && fields.vibes) {\n        vibeMatches = matchLists(vibes, fields.vibes)\n\n        relatedVibeMatches = options.relatedVibes ?\n          matchLists(options.relatedVibes, fields.vibes)\n          : 0\n        // The average rank scores by the order of the array\n        // That is the first vibe gets ranks higher than the last one\n        averageRank = rankVibes(vibes, fields.vibes)\n\n        // Bonus for exact matches + all place vibes\n        const vibeMatchScore = vibeMatches * vibeMatchBonus + relatedVibeMatches * vibeRelatedBonus\n        const vibeOrderScore = averageRank * vibeOrderBonus\n        vibeBonus += vibeMatchScore + vibeOrderScore\n        fields.vibes_score += vibeBonus\n\n        // For debugging purposes\n        fields.stats['num_vibes'] = fields.vibes.length\n        fields.stats['num_matching_vibes'] = vibeMatches\n        fields.stats['vibe_match_score'] = vibeMatchScore\n        fields.stats['vibe_order_score'] = vibeOrderScore\n      }\n\n      // Set max vibe score\n      if (fields.vibes_score > maxScores.vibes) {\n        maxScores.vibes = fields.vibes_score\n      }\n\n      if (fields.vibes_score < minScores.vibes) {\n        minScores.vibes = fields.vibes_score\n      }\n\n      //console.log('Scoring weights: ', weights, ordering, vibeRankBonus)\n      //console.log('For these vibes: ', fields.vibes)\n      //console.log('Vibe score bonus: ', fields.vibes_score, vibeBonus)\n      //console.log('Vibe order bonus: ', fields.vibes_score, vibeBonus)\n      //console.log('Vibe score: ', vibeMatches, averageRank, vibeBonus)\n      fields.stats['total_vibe_score'] = fields.vibes_score\n    }\n\n    // Get scores and max in each category\n    // TODO: Make a separate, modular method\n    if (scoreBy.includes('categories')) {\n      let [categoryMatches, averageRank, vibeBonus] = [0, 0, 0]\n\n      fields.categories_score = 0\n\n      // Merge and remove duplicates\n      const concatCategories = fields.categories.concat(fields.subcategories);\n      const allCategories = concatCategories.filter(\n        (item, index) => concatCategories.indexOf(item) == index\n      );\n\n      if (fields.categories.length > 0)\n        fields.categories_score = fields.categories.length\n      //console.log('Base category score: ', fields.categories_score, allCategories)\n\n      // Give matching categories for the vibe a bonus\n      if (vibes.length > 0) {\n        // Get vibes for the place category\n        let categoryVibes = []\n        allCategories.forEach((category) => {\n          //console.log('Category: ', fields.name, category)\n          // TODO: There probably a cleaner way to search for both categories and subcategories\n          const foundCategories = constants.place_sub_categories.filter((o) =>\n            o.main_category.includes(category)\n          );\n          const foundSubcategories = constants.place_sub_categories.filter(\n            (o) => o.name.includes(category)\n          );\n\n          if (foundCategories.length > 0) {\n            categoryVibes = categoryVibes.concat(foundCategories[0].vibes);\n          }\n\n          if (foundSubcategories.length > 0) {\n            categoryVibes = categoryVibes.concat(foundSubcategories[0].vibes);\n          }\n        });\n\n        categoryMatches = matchLists(vibes, categoryVibes)\n        const bonus = categoryMatches * vibeMatchBonus\n        fields.categories_score += bonus\n      }\n\n      if (fields.categories_score > maxScores['categories']) {\n        maxScores['categories'] = fields.categories_score;\n      }\n      if (fields.categories_score < minScores['categories']) {\n        minScores['categories'] = fields.categories_score;\n      }\n    }\n\n    // Get the min and max scores for normalization\n    // Add score for the number of likes or RSVPs for events\n    if (scoreBy.includes('likes')) {\n      // Set max aggregate score\n      if (fields.likes > maxScores['likes']) {\n        maxScores['likes'] = fields.likes\n      }\n\n      if (fields.likes < minScores['likes']) {\n        minScores['likes'] = fields.likes\n      }\n    }\n\n    // Add score for distance from user\n    if (scoreBy.includes('distance')) {\n      // TODO: Make a util in map.js\n      const placePoint = turf.point(place.geometry ? place.geometry.coordinates : [0, 0])\n\n      // Does this return in kilometers? Miles?\n      fields['distance'] = turf_distance(centerPoint, placePoint)\n      // Set max distance\n      if (fields['distance'] > maxScores['distance']) {\n        maxScores['distance'] = fields['distance']\n      }\n      if (fields['distance'] < minScores['distance']) {\n        minScores['distance'] = fields['distance']\n      }\n    }\n\n    if (scoreBy.includes('aggregate_rating')) {\n      // Set max aggregate score\n      if (fields.aggregate_rating > maxScores['aggregate_rating']) {\n        maxScores['aggregate_rating'] = fields.aggregate_rating\n      }\n      if (fields.aggregate_rating < minScores['aggregate_rating']) {\n        minScores['aggregate_rating'] = fields.aggregate_rating\n      }\n\n      if (minScores['aggregate_rating_count'] == undefined) {\n        minScores['aggregate_rating_count'] = 1\n        maxScores['aggregate_rating_count'] = 1\n      }\n      // And the count of ratings that make the score\n      if (fields.aggregate_rating_count > maxScores['aggregate_rating_count']) {\n        maxScores['aggregate_rating_count'] = fields.aggregate_rating_count\n      }\n      if (fields.aggregate_rating_count < minScores['aggregate_rating_count']) {\n        minScores['aggregate_rating_count'] = fields.aggregate_rating_count\n      }\n    }\n\n    // TODO: WIP concept for popular times and hours\n    // TODO: Move to backend or make a separate, modular method\n    //console.log('Score place on these fields: ', fields.offers, fields.opening_hours)\n    fields.offers_score = 0\n    fields.hours_score = 0\n\n    // Give bonus if place has offers or is open\n    if (scoreBy.includes('offers')) {\n      if (fields.offers && fields.offers.length > 0) {\n        fields.offers_score = offerBonus\n      }\n\n      let { openNow, openToday, opens, closes, isPopular } = isOpen(\n        fields.opening_hours\n      );\n\n      // Store in place details\n      // TODO: Make sure these field name match the upgraded API\n      fields.open_now = openNow\n      fields.popular_now = isPopular\n      fields.opens = opens\n      fields.closes = closes\n\n      // Give bonus if open now\n      if (openToday) fields.hours_score += openBonus\n      if (openNow) fields.hours_score += openBonus\n      if (isPopular) fields.hours_score += popularBonus\n    }\n\n    fields.stats['hours_bonus'] = fields.hours_score\n\n    place.properties = fields\n    return place\n  });\n\n  // Now normalize all the scores\n  let maxAverageScore = 0\n  let minAverageScore = Infinity\n\n  // Normalize each place by the top scores across all results\n  let placesScoredAveraged = placesScored.map((place) => {\n    let fields = place.properties\n\n    // TODO: This could be more steamlined automatically for each key in scoreBy\n    if (scoreBy.includes('vibes')) {\n      fields.vibes_score = normalize_all(fields.vibes_score, minScores['vibes'], maxScores['vibes'], 0, 1)\n      fields.vibes_score = fields.vibes_score * weights['vibe']\n      //console.log('fields.vibes_score: ', fields.name, fields.vibes_score)\n    }\n\n    if (scoreBy.includes('categories')) {\n      fields.categories_score = normalize_all(\n        fields.categories_score, minScores['categories'], maxScores['categories'], 0, 1);\n      fields.categories_score = fields.categories_score * weights['category']\n      //console.log('fields.categories_score: ', fields.name, fields.categories_score)\n    }\n\n    if (scoreBy.includes('likes')) {\n      fields.likes_score = normalize_all(fields.likes, minScores['likes'], maxScores['likes'], 0, 1)\n    }\n\n    if (scoreBy.includes('venue')) {\n      fields.venue_score = normalize_all(fields.place_vibe_count, minScores['likplace_vibe_countes'], maxScores['place_vibe_count'], 0, 1)\n    }\n\n    // Get average rating and scale it by a factor\n    if (scoreBy.includes('aggregate_rating')) {\n      const aggregate_score = normalize_all(\n        fields.aggregate_rating,\n        minScores['aggregate_rating'],\n        maxScores['aggregate_rating'],\n        0, 1)\n\n      const aggregate_rating_count_score = normalize_all(\n        fields.aggregate_rating_count,\n        minScores['aggregate_rating_count'],\n        maxScores['aggregate_rating_count'],\n        0, 1)\n\n      //console.log('DEBUG: Combine rating score ', aggregate_score, aggregate_rating_count_score)\n      fields.aggregate_rating_score = (aggregate_score + aggregate_rating_count_score) / 2\n      fields.aggregate_rating_score *= weights.rating\n      fields.stats['aggregate_rating_score'] = fields.aggregate_rating_score\n    }\n\n    // Smallest distance gets largest score\n    if (scoreBy.includes('distance')) {\n      let maxDistance = maxScores['distance']\n\n      /* all distance values are normalized between 0 and 0.95. Since we take the difference of 1 and the score,\n        the lowest possible distance_score is 0.05, and the highest is 1. We do this such that lower distances\n        (closer places) get a higher distacne score.\n      */\n      fields.distance_score = 1 - normalize_all(fields.distance, minScores['distance'], maxDistance, 0, 0.95)\n\n      //console.log(fields.distance, minScores['distance'], maxDistance, maxDistance - fields.distance, fields.distance_score)\n      fields.distance_score *= weights.distance\n      fields.stats['distance_score'] = fields.distance_score\n    }\n\n    if (scoreBy.includes('hours')) {\n      fields.hours_score *= weights.hours\n    }\n\n    const reasons = scoreBy;\n    const scores = scoreBy.map((field) => fields[field + '_score'])\n\n    // Find the larged score\n    const largestIndex = scores.indexOf(Math.max.apply(null, scores))\n\n    // Find the smallest score\n\n    scores.indexOf(Math.min.apply(null, scores))\n\n    // Take an average of each of the scores\n    fields.average_score = scores.reduce((a, b) => a + b, 0) / scores.length\n    // Update the top average score\n    if (fields.average_score > maxAverageScore)\n      maxAverageScore = fields.average_score;\n\n    if (fields.average_score < minAverageScore)\n      minAverageScore = fields.average_score\n    // Add the update the reason code\n    fields.reason = reasons[largestIndex]\n    //console.log(`Top reason `, fields.name, fields.reason)\n\n    place.properties = fields\n    return place\n  })\n\n  // Re-sort by average score\n  const placesScoredAndSorted = placesScoredAveraged.sort(\n    (a, b) => b.properties.average_score - a.properties.average_score\n  )\n\n  // Normalize the scores between 0.65 and 1\n  const placesSortedAndNormalized = placesScoredAndSorted.map((place) => {\n    let fields = place.properties\n    //console.log(place.properties.name, minAverageScore, fields.average_score, maxAverageScore)\n\n    // ⚡⚡ final score returned to user is normalized between 0.65 and 1\n    fields.average_score = normalize_all(fields.average_score, minAverageScore, maxAverageScore, 0.65, 1)\n    fields.icon_size = scaleIconSize(fields.average_score, 0.65, 1)\n\n    // All average_scores should be between 0.65 and 1, and icon_size between 1 and 5. Should also print in descending order\n    //If so, then all is working well\n    //console.log(place.properties.name, place.properties.address, fields.average_score, fields.distance_score, weights.distance)//, fields.icon_size)\n    // Scale the icon size based on score\n    fields.stats['final_score_normalized'] = fields.average_score\n\n    return place\n  })\n\n  // TODO: for debugging only\n  /*placesSortedAndNormalized.map((place) => {\n    console.log(place.properties.name)\n    console.log(' - score: ', place.properties.average_score)\n    console.log(' - vibes_score: ', place.properties.vibes_score)\n    console.log(' - aggregate rating: ', place.properties.aggregate_rating_score)\n    console.log(' - distance: ', place.properties.distance_score, \"weight: \", weights.distance)\n    console.log(' - reason: ', place.properties.reason)\n    console.log(' - final_score_normalized: ', place.properties.average_score)\n  })\n  */\n\n  const numPlaces = placesSortedAndNormalized.length\n  const results = shuffle && numPlaces > 100\n    ? module.exports.shuffleTopPicks(placesSortedAndNormalized)\n    : placesSortedAndNormalized\n\n  return results\n}\n\n// Only return the requested fields and remove all others from GeoJSON properies\nexport const reducePlaceProperties = (\n  places,\n  fields = [\n    'name',\n    'url',\n    'address',\n    'categories',\n    'subcategories',\n    'neighborhood',\n    'price',\n    'short_description',\n    'vibemap_images',\n    'vibes'\n  ]) => {\n\n  const places_reduced = places.map(place => {\n    place.properties = Object.fromEntries(\n      fields.map(key => [key, place.properties[key]])\n    )\n    return place\n    //console.log('reduced this place ', place.properties)\n  })\n\n  return places_reduced\n}\n\nexport const shuffleTopPicks = (places, numTop = 20) => {\n  // Slice and Shuffle\n  const topPlaces = places.slice(0, numTop)\n    .map(value => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value)\n\n  // Store remainder\n  const remainingPlaces = places.slice(numTop)\n\n  // Combine and return all\n  const placesCombined = topPlaces.concat(remainingPlaces)\n  return placesCombined\n}\n\nexport const toTitleCase = (str) => {\n  if (typeof str == 'string') {\n    str = str.toLowerCase().split(' ')\n    for (var i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1)\n    }\n    return str.join(' ')\n  } else {\n    return str\n  }\n}\n\n\n// TODO: add neighborhood as top place of the list. Will need some neighborhood cards\n//Function that returns every place within a certain specified radius\nexport const nearest_places = (places, currentLocation, radius = 5) => {\n  //console.log(\"current Location: \", currentLocation)\n  //console.log(\"Full list of Places: \", places)\n\n  // Push any place whose distance is under radius (0.1) to places_temp\n  var places_temp = []\n  const distance_calculated = places.map((place) => {\n    let fields = place.properties\n    const placePoint = turf.point(place.geometry.coordinates)\n    fields['distance'] = turf_distance(currentLocation, placePoint)\n    if (fields['distance'] < radius) {\n      places_temp.push(place)\n      //console.log(\"Place within bound: \", fields[\"distance\"])\n    }\n  })\n\n  // Sort on a copy not a reference\n  var places_to_return = places_temp.slice(0)\n\n  // Do sorting after .map(), should be faster performance\n  places_to_return.sort(function (a, b) {\n    return a.properties.distance - b.properties.distance\n  })\n\n  /* For debugging, make sure every place is sorted in ascending order\n  places_to_return.map((x) => {\n    console.log(\"sorted: \", x.properties.distance)\n  })\n  */\n  return places_to_return\n}\n\n//Function that checks if a place is within a certain distance of user, for check ins\nexport const validate_check_in = (place, currentLocation, threshold = 0.5) => {\n  const placePoint = turf.point(place.geometry.coordinates)\n  const within_distance = turf_distance(currentLocation, placePoint) < threshold ? true : false\n  return within_distance\n}\n// Function determines if a point falls into the specific boundaries of Jack London District\nexport const in_jls = (currentLocation) => {\n\n  // Hand drawn locations. Roughly everything beneath 7th St, between Market St. and Fallon St.\n  const bounds_jls = turf.polygon([[\n    [-122.282617, 37.802862],\n    [-122.264300, 37.795721],\n    [-122.265502, 37.787005],\n    [-122.288139, 37.796077],\n    [-122.282617, 37.802862]\n  ]])\n  return turf_boolean(currentLocation, bounds_jls)\n}\n\n// Primary function that returns a list of neighborhoods the location is in.\n// The input is the place's properties, returns array of neighborhood id's\n// Vectorizes our wordpress neighborhoods data (neighborhoods.json) and flexibly utilizes available information as bounds\n// If no bounds (bbox) is given, use radius, if no radius, then a hard radius of 0.8 km is set\nexport const in_neighborhood = (place) => {\n\n  // Name array is not returned but could be if desired, more for debugging\n  const valid_neighborhoods_id = []\n  const valid_neighborhoods_name = []\n  const turf_point = turf.point(place.geometry.coordinates)\n\n  neighborhoods.map((neighborhood) => {\n    const neigh_dist = turf_distance([neighborhood.map.lng, neighborhood.map.lat], turf_point)\n\n    /* Use helper function since can't assign turf.boolean() to non valid polygons which in turn can't be handled within\n     the conditional statement*/\n    if (neigh_dist < 5 && in_bbox_helper(place.geometry.coordinates, neighborhood.boundary)) {\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else if (neighborhood.radius > 0.00001 && neigh_dist < neighborhood.radius) {\n      //console.log(\"radius checked\")\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else if (neigh_dist < 0.8) {\n      //console.log(\"dist checked\")\n      valid_neighborhoods_id.push(neighborhood.id)\n      valid_neighborhoods_name.push(neighborhood.slug)\n    } else {\n\n    }\n  })\n  return valid_neighborhoods_id\n}\n\n// Helper function to determine if a location is within certain bounds\nexport const in_bbox_helper = (point, bbox) => {\n  if (bbox !== \"\" && bbox !== undefined) {\n    const parsed_bbox = JSON.parse(bbox)\n    const bounds = turf.polygon([parsed_bbox])\n    //console.log(\"bbox\", parsed_bbox)\n    return turf_boolean(point, bounds)\n  } else {\n    //console.log(\"no bbox\")\n    return false\n  }\n}\n\n// General function to find nearest neighborhood of a locations. Returns top ten options\n// Input must be [longitude, lattitude] coordinates\nexport const nearest_neighborhood = (placePoint) => {\n  const neighborhoods_ordered = neighborhoods.map((neighborhood) => {\n    return {\n      name: neighborhood.name,\n      neigh_dist: turf_distance([neighborhood.map.lng, neighborhood.map.lat], placePoint)\n    }\n  })\n  neighborhoods_ordered.sort(function (a, b) {\n    return a.neigh_dist - b.neigh_dist\n  })\n  return neighborhoods_ordered.slice(0, 10)\n}\n\n// Helper function for associate_badge. Returns every neighborhood challenge badge\n// TODO modify such that inputs can be multiple badge types, for example lookup general badges or neighborhood or place etc.\nexport const challenge_badges_lookup = () => {\n  const challenge_badges = []\n  badges.badges.map((badge) => {\n    if (badge.type == \"neighborhood\") {\n      challenge_badges.push(badge)\n    }\n  })\n  return challenge_badges\n}\n\n// Returns array of valid badges (and properties) that a place is associated with. Give points towards that badge\nexport const associate_badge = (locations) => {\n  const badges_to_check = challenge_badges_lookup()\n  const win_badges = []\n  badges_to_check.map((badge) => {\n    console.log(badge)\n    for (let i = 0; i < locations.length; i++) {\n      if (badge.location.ID == locations[i]) {\n        win_badges.push(badge)\n      }\n    }\n  })\n  return win_badges\n}\n\n/**\n * Cities from Mapbox by keyword or name\n *\n * @param {String} search\n *\n * @returns {Object[]}\n */\nexport const searchCities = async (search = '') => {\n  const endpoint = `https://dev.vibemap.com/search_locations/?city=${search}`\n  const distanceForMatch = 10\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n    return {\n      error: true,\n      data: error\n    }\n  })\n\n  const results = response.data.map(newCity => {    \n\n    const foundCity = cities.find(city => city.name.includes(newCity.name))\n    if (foundCity) {\n      const checkDistance = distanceBetweenLocations(newCity.location, foundCity.location)\n      if (checkDistance < distanceForMatch) {\n        return foundCity\n      }\n    }\n    // TODO: Make this fuzzy search on a new service \n    let foundNeighborhood = neighborhoods.find(neighborhood => {\n      return neighborhood.name.toLowerCase().includes(newCity.name.toLowerCase())\n    })       \n    \n    return newCity\n  })  \n\n  return results\n}\n\nexport const getAllBoundaries = async () => {\n  const endpoint = `https://api.vibemap.com/v0.3/boundaries/?admin_level=both`\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n  })  \n\n  return response.data\n}\n\nexport const getBoundary = async (slug = 'chicago') => {\n  const endpoint = `https://api.vibemap.com/v0.3/boundaries/?admin_level=both&slug=${slug}`\n  const response = await axios.get(endpoint).catch(error => {\n    console.log(`error `, error)\n  })\n\n  if (response && response.data) {\n    try {\n      const boundary = response.data.results[0] || null\n      return boundary\n    } catch (error) {\n      console.log('Problem with boundary data ', error);\n      return null\n    }\n          \n  } else {\n    return null\n  }  \n}\n\nexport const searchPlacesByName = async (options, apiURL) => {\n\n  const centerPoint = options.point ? options.point.split(',').map(parseFloat) : ''\n  let retries = 3\n\n  let searchParams = {\n    ordering: 'name',\n    category: options.category || '',\n    per_page: options.perPage || 50,\n    dist: options.distance > 0 ? options.distance * constants.METERS_PER_MILE : '',\n    point: centerPoint,\n    search: options.search || '',\n    vibes: options.vibes || '',\n    zoom: options.zoom || '',\n  }\n\n  let apiResult\n\n  const useElastic = true\n  const apiPath = useElastic ? 'search/places' : 'places'\n\n  do {\n    const searchQuery = new URLSearchParams(searchParams).toString()\n    apiResult = await axios.get(`${apiURL}/${apiPath}/?${searchQuery}`)\n      .catch(function (error) {\n        console.log('axios error ', error.response && error.response.statusText);\n\n        return []\n      })\n\n    retries--\n    searchParams.dist /= 2\n  } while (retries > 0 && !apiResult.count)\n\n  const results = apiResult.data\n    ? apiResult.data.results.features\n    : []\n  return results\n}\n\n\n/**\n * Gets related vibes for a neighborhood and sorts neighborhoods\n * by vibe intersection count between related and neighborhood vibes.\n *\n * @param {Object[]} neighborhoods\n * @param {String[]} vibeSlugs\n *\n * @returns {Object[]}\n */\nexport const sortNeighborhoodsByVibes = (neighborhoods, vibeSlugs) => {\n  if (vibeSlugs.length === 0) return neighborhoods\n\n  const relatedVibeSlugs = getRelatedVibes(vibeSlugs)\n  const vibeSlugsToIntersect = [...new Set([...vibeSlugs, ...relatedVibeSlugs])]\n\n  // add vibeIntersection property\n  const neighborhoodsWithVibeIntersection = neighborhoods.map(\n    (neighborhood) => {\n      const neighborhoodVibes = neighborhood.vibes || neighborhood.acf.vibes\n      const neighborhoodVibeSlugs = neighborhoodVibes.map(({ slug }) => slug)\n\n      const vibeIntersection = vibeSlugsToIntersect.filter((slug) =>\n        neighborhoodVibeSlugs.includes(slug)\n      ).length\n\n      return {\n        ...neighborhood,\n        vibeIntersection\n      }\n    }\n  )\n\n  const sortedNeighborhoods = neighborhoodsWithVibeIntersection.sort((a, b) =>\n    b.vibeIntersection - a.vibeIntersection\n  )\n\n  // remove vibeIntersection property (just to not alter previous structure)\n  return sortedNeighborhoods.map((neighborhood) => {\n    const { vibeIntersection, ...restOfNeighborhood } = neighborhood\n    return restOfNeighborhood\n  })\n}\n"],"names":["axiosRetry","Axios","retries","retryDelay","exponentialDelay","onRetry","count","err","config","console","log","axios","jsonpack","dayjs","extend","isBetween","dayjsRecur","require","let","activityCategories","categories_flat","getAPIDomain","mode","env_mode","process","env","API_ENV","current_mode","api_domain","api_version","ApiUrl","filterList","list","test","value","searchTerm","key","re","RegExp","replace","filter","item","result","isMatch","getRandomItem","Math","floor","random","length","encodeCardIndex","row","column","matchLists","listA","listB","matches","includes","word","rankVibes","rankings","map","score","indexOf","reduce","a","b","sortByKey","sortByPopularity","aPop","parseInt","details","msv","activityCategoriesPacked","unpack","sort","category","name","toLowerCase","error","sortByArray","sortedList","sortingArr","isClosedToday","dailyHours","opens","closes","displayHours","hours","dayFormat","openHours","isOpen","weeklyHours","find","day_of_week","openEveryday","times","time","format","popularFound","push","day","i","orderedHours","dayFound","isClosed","undefined","closed","Object","assign","split","hour","minute","date","openNow","openToday","isPopular","hasDailyHours","daysClosed","parseDateTime","datetime","formatDateTime","formatHtml","showDayOfWeek","month","weekday","getCardOptions","categoryQuery","distanceQuery","geoQuery","searchQuery","vibeQuery","block","singCards","posts","overrideQuery","vibe","cities","selectedCity","slug","location","distance","firstCity","vibesFromCategories","point","longitude","latitude","ordering","search","vibes","getAPIParams","options","per_page","includeRelated","activity","params","distanceInMeters","round","constants.METERS_PER_MILE","coords","lat","lon","editorial_category","term","is_chain","is_closed","is_destination","city","getCategoryMatch","categories","all_categories","getFullLink","link","type","parse_url","url","parse","URL","path","instagram","twitter","facebook","geLocationFromCity","cityDetails","placemarker","getMax","items","attribute","max","forEach","getMin","min","getTimeOfDay","isValid","currentHour","parseFloat","getTopLocations","places","location_type","flat","top_locations","place","properties","hasOwnProperty","sortable","top_locations_sorted","getTopVibes","top_vibes","top_vibes_sorted","getTopCategories","top_categories","getWaveFromVibe","graphToEvents","edges","edge","groupEvent","node","groupDetails","description","image","images","original","price","recurrence","recurring","which","startTime","endTime","recurRule","nextDateFromRecurring","nextStartTime","next","toLocaleString","nextEndTime","id","title","geometry","coordinates","dateTime","card_type","address","streetAddress","is_online","hotspots_place","start_date","end_date","vibemap_images","likes","recurs","groupsToEvents","groups","acf","label","start_time","end_time","toISOString","normalize","val","normalize_all","scale_low","scale_high","scale","LinearScale","domain","range","scaleIconSize","scaleMarker","zoom","isNaN","marker_scale","base_marker","max_marker","scaleDensityArea","density","area","density_scale","scaleDensityBonus","inverted_scale","constants.HEATMAP_INTENSITY","HEATMAP_INTENSITY","relative_density","scaleScore","scaleSelectedMarker","getEventOptions","date_range","locations","concat","neighborhoods","selectedLocation","today","dayOfWeek","startOf","startOffset","endOffset","monthEnd","endOf","diff","date_range_start","add","date_range_end","start_date_after","end_date_before","fetchEvents","async","activitySearch","recurringSearch","days","centerPoint","currentLocation","getLocationFromPoint","nearestCities","sortLocations","module","exports","query","querystring","stringify","apiEndpoint","source","CancelToken","response","get","cancelToken","token","catch","statusText","data","loading","timedOut","getGroups","recurringGroupEvents","results","features","whichDay","weekOfMonth","recur","every","daysOfWeek","weeksOfMonthByDay","fetchPlacesDetails","fetchPlacePicks","preferredVibes","relatedVibes","useNearest","numOfPlaces","hasVibes","distanceFrom","distanceBetweenLocations","centerpoint","join","getPlaces","newOptions","placeResults","formatPlaces","vibesQuery","vibesCombined","placesScoredAndSorted","scorePlaces","shouldShuffle","fetchPlacesFromSearch","URLSearchParams","toString","fetchPlacesFromIds","ids","endpoint","decodePlaces","feature","JSON","subcategories","thumbnail_url","opening_hours","tips","telephone","website","categories_top_flat","getCategoriesByLevel","fields","place_type","short_name","truncate","constants.TRUCATE_LENGTH","aggregate_rating","aggregate_rating_count","num_vibes","sub_categories","top_vibe","matchingCategories","sortedCategories","icon_label","icon","cluster","vibesFromPlaces","getRecommendedVibes","scoreBy","shuffle","maxScores","minScores","field","Infinity","zoom_to_use","zoom_norm","weights","exp","rating","offers","placesScored","stats","vibeMatches","vibeBonus","vibes_score","scoreVibeLength","log10","vibeMatchScore","vibeOrderScore","categoryMatches","categories_score","concatCategories","allCategories","index","categoryVibes","foundCategories","constants.place_sub_categories","o","main_category","foundSubcategories","placePoint","turf","turf_distance","offers_score","hours_score","open_now","popular_now","maxAverageScore","minAverageScore","placesScoredAveraged","likes_score","venue_score","place_vibe_count","aggregate_score","aggregate_rating_count_score","aggregate_rating_score","maxDistance","distance_score","reasons","scores","largestIndex","apply","average_score","reason","placesSortedAndNormalized","icon_size","numPlaces","shuffleTopPicks","reducePlaceProperties","fromEntries","numTop","topPlaces","slice","remainingPlaces","toTitleCase","str","charAt","toUpperCase","nearest_places","radius","places_temp","places_to_return","validate_check_in","threshold","in_jls","bounds_jls","polygon","turf_boolean","in_neighborhood","valid_neighborhoods_id","valid_neighborhoods_name","turf_point","neigh_dist","neighborhood","lng","in_bbox_helper","boundary","bbox","parsed_bbox","bounds","nearest_neighborhood","neighborhoods_ordered","challenge_badges_lookup","challenge_badges","badges","badge","associate_badge","badges_to_check","win_badges","ID","searchCities","newCity","foundCity","getAllBoundaries","getBoundary","searchPlacesByName","apiURL","searchParams","perPage","dist","apiResult","sortNeighborhoodsByVibes","vibeSlugs","relatedVibeSlugs","getRelatedVibes","vibeSlugsToIntersect","Set","neighborhoodsWithVibeIntersection","neighborhoodVibes","neighborhoodVibeSlugs","vibeIntersection","sortedNeighborhoods","restOfNeighborhood"],"mappings":"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"}