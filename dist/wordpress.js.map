{"version":3,"file":"wordpress.js","sources":["../utils/wordpress.js"],"sourcesContent":["import Axios from \"axios\"\nimport axiosRetry from 'axios-retry'\n\naxiosRetry(Axios, {\n  retries: 3,\n  retryDelay: axiosRetry.exponentialDelay\n})\n\nconst jsonpack = require('jsonpack')\n\nconst GATSBY_WP_BASEURL = 'https://cms.vibemap.com'\nconst REST_PATH = '/wp-json/wp/v2/'\n\nconst helpers = require('./helpers.js')\n\n// Cached Wordpress taxonomies for reference\n// Note: this data is stored everytime this library is versioned.\nconst postCategories = require('../dist/postCategories')\n\nlet vibeTaxonomy = []\n\ntry {\n  const vibeTaxonomyPacked = require('../dist/vibesFromCMSTaxonomy.zip.json')\n  vibeTaxonomy = jsonpack.unpack(vibeTaxonomyPacked)\n} catch (error) {\n  console.log('Error with packed vibes ', error)\n}\n\nimport { activityCategories } from '../dist/activityCategories.json'\n\nimport cities from '../dist/cities.json'\n\nconst defaultFilters = {\n  categories: [],\n  cities: [],\n  vibesets: [],\n  vibes: []\n}\n\n// Get a list of Wordpress taxonomy or category ids by slug\n// If empty, i.e. the slug isn't use, returns an empty array,\n// which will search for everything.\nexport const getTaxonomyIds = (type, filter = ['chill']) => {\n  switch (type) {\n    case 'category':\n      return filter.map(slug => {\n        // Find taxonomy that match slug\n        const matches = helpers.filterList(activityCategories, slug, 'slug');\n        return matches.length > 0\n          ? matches.map(match => match.id)\n          : []\n      })\n\n    case 'vibe':\n      return filter.map(slug => {\n        // Find taxonomy that match slug\n        const matches = helpers.filterList(vibeTaxonomy, slug, 'slug')\n        return matches.length > 0\n          ? matches.map(match => match.id)\n          : []\n      })\n      break;\n\n    case 'cities':\n      return filter.map(slug => {\n        // Find taxonomy that match slug\n        const matches = helpers.filterList(cities, slug, 'slug')\n\n        return matches.length > 0\n          ? matches.map(match => match.id)\n          : []\n\n      })\n      break;\n\n    default:\n      break;\n  }\n  return []\n}\n\nexport const fetchBadges = async () => {\n  // const cityFilters = '?_fields=id, link, name, slug, title, acf'\n\n  const endpoint = `${GATSBY_WP_BASEURL + REST_PATH}badges`\n  const response = await Axios.get(endpoint)\n    .catch(error => console.error(error))\n\n  return response\n}\n\nexport const fetchCities = async (per_page = 50) => {\n  const cityFilters = `?_fields=id, link, name, radius, slug, title, acf, type\n    &per_page=${per_page}`\n\n  const endpoint = `${GATSBY_WP_BASEURL + REST_PATH}city${cityFilters}`\n  const response = await Axios.get(endpoint)\n      .catch(error => console.error(error))\n\n  return response\n}\n\n// TODO: Sort by location\n// TODO: SOrt by vibe match\nexport const fetchNeighborhoods = async (filters = defaultFilters, page = 1, postsPerPage = 100) => {\n    //console.log('fetchNeighborhoods: ', filters)\n    // TODO: Filter by vibe or other attributes\n    const source = Axios.CancelToken.source()\n    //console.log('Filtering neighborhoods by: ', filters)\n\n    // TODO: Use the ACF endpoint instead:\n    // https://cms.vibemap.com/wp-json/acf/v3/neighborhoods\n    const apiFilters = '?_fields=id, slug, type, link, _links, title, categories, vibe, acf, content, featured_media, featured_media_src_url'\n    const url = `${GATSBY_WP_BASEURL}/wp-json/wp/v2/neighborhoods${apiFilters}`\n    console.log('Wordpress URL ', url)\n    let response = await Axios.get(url, {\n        cancelToken: source.token,\n        params: {\n          _embed: true,\n          per_page: postsPerPage,\n          page: page >= 1 ? page : 1,\n          //before: buildTime, // Let's make sure posts that have a page built are the only ones being pulled in.\n          categories: filters.category,\n          vibesets: filters.vibesets.toString(),\n          //vibe: 1073, //TODO: Filter by vibe taxonomy\n          //cities: getTaxonomyIds('cities', filters.cities).toString(),\n          //cities: filters.cities.toString(),\n        },\n      })\n      .catch(error => {\n        console.error(error)\n      })\n\n    response.numPages = parseInt(response.headers[\"x-wp-totalpages\"])\n\n    return response\n}\n\n// Get post categories\nexport const fetchActivityCategories = async (\n  filters = defaultFilters,\n  page = 1,\n  per_page = 100,\n  postsPerPage = 500\n) => {\n  const fetchData = async (page = 1, per_page = 100) => {\n    // Fetch all activity categories and subcategories\n    const source = Axios.CancelToken.source()\n    const rest_slug = 'activity-category'\n    const rest_url = `${GATSBY_WP_BASEURL}/wp-json/wp/v2/${rest_slug}?per_page=${per_page}&page=${page}`\n    console.log(`Fetching ${rest_slug} from ${rest_url}`)\n    let response = await Axios.get(rest_url, { cancelToken: source.token })\n    .catch(error => { console.error(error) })\n\n    return response.data\n  }\n\n  let combinedData = await fetchData(page, per_page);\n\n  let hasNext = true;\n  let nextData = [];\n  let next_page = page;\n  // Handle pagination\n  console.log(`Has more?  `, combinedData.length, next_page * per_page);\n  while (hasNext) {\n    if (combinedData.length >= (next_page * per_page)) {\n      next_page = next_page + 1;\n      nextData = await fetchData(next_page)\n        .catch(error => console.error(error));\n\n      combinedData = combinedData.concat(nextData);\n      //console.log('Updated combinedData ', combinedData.length, nextData.length)\n    } else {\n      hasNext = false;\n    }\n  }\n\n  console.log('Got this many activities: ', combinedData.length)\n  return combinedData\n}\n\n// Get post categories\nexport const fetchCategories = async (filters = defaultFilters, page = 1, postsPerPage = 100) => {\n  //console.log('fetchNeighborhoods: ', filters)\n\n  // TODO: Filter by vibe or other attributes\n  const source = Axios.CancelToken.source()\n\n  let response = await Axios.get(`${GATSBY_WP_BASEURL}/wp-json/wp/v2/categories/`, {\n      cancelToken: source.token,\n    })\n    .catch(error => {\n      console.error(error)\n    })\n\n  response.numPages = parseInt(response.headers[\"x-wp-totalpages\"])\n\n  return response\n}\n\nexport const getCityInfo = (name = 'San Francisco', slug = null) => {\n  let city = null\n  if (slug) {\n      // Handle both string and array\n      slug = slug.toString()\n      // Filter cities in wordpress\n      const findCitySlug = cities.filter(result => result.slug === slug.toString())\n      city = findCitySlug.length > 0 ? findCitySlug[0] : null\n  } {\n      const findCityName = cities.filter(result => result.name === name)\n      city = findCityName.length > 0 ? findCityName[0] : null\n  }\n\n  return city\n}\n\nexport const filterNeighborhoods = (neighborhoods, city = 'San Francisco', slug = null) => {\n  // Look up city by slug\n  if (slug) {\n    // Handle both string and array\n    slug = slug.toString()\n    // Filter cities in wordpress\n    const findCitySlug = cities.filter(result => result.slug === slug.toString())\n    city = findCitySlug.length > 0 ? findCitySlug[0].title.rendered : null\n  }\n\n  // Template of the array objects\n  // return {\n  //   id: neighborhood.id,\n  //   title: neighborhood.title.rendered,\n  //   subtitle: 'Neighborhood',\n  //   imageUrl: image,\n  //   url: neighborhood.link.replace(/^(?:\\/\\/|[^/]+)*/, ''),\n  //   slug: neighborhood.slug,\n  //   city: neighborhood.acf.map.city,\n  // };\n  const filterPredicate = (neighborhood) => neighborhood.city === city || neighborhood.title.includes(city)\n\n  // Return all, if there's not city filter\n  if (city || slug) {\n    return filter(neighborhoods, filterPredicate)\n  } else {\n    return neighborhoods\n  }\n}\n\nexport const fetchVibeTaxonomy = async (\n  page = 1,\n  per_page = 100,\n  fields = ['acf', 'id', 'link', 'name', 'slug', 'description']\n) => {\n\n  const fetchData = async (page = 1, per_page = 100) => {\n    const taxonomyFilters = `?_fields=${fields.join(',')}&per_page=${per_page}&page=${page}`;\n    const endpoint = `${GATSBY_WP_BASEURL + REST_PATH}vibe${taxonomyFilters}`;\n    //console.log('fetchVibeTaxonomy ', endpoint)\n    const response = await Axios.get(endpoint)\n      .catch(error => console.error(error))\n\n    return response.data\n  }\n\n  let combinedData = await fetchData(page, per_page)\n\n  let hasNext = true\n  let nextData = []\n  let next_page = page\n  // Check for next page, else return combined\n  while (hasNext) {\n    //console.log('Really has next? ', combinedData.length, (next_page * per_page))\n    if (combinedData.length >= (next_page * per_page)) {\n      next_page = next_page + 1\n      nextData = await fetchData(next_page)\n        .catch(error => console.error(error))\n\n      combinedData = combinedData.concat(nextData)\n      //console.log('Updated combinedData ', combinedData.length, nextData.length)\n    } else {\n      hasNext = false\n    }\n  }\n  //console.log('return combinedData ', combinedData)\n  return combinedData\n}\n\nexport const getGroups = async ({\n  eventsOnly = false,\n  city = null,\n  per_page=100,\n  search = '',\n} = {}) => {\n\n  /* TODO: GraphQL is too slow\n  const query = {\n    \"operationName\": \"GroupEvents\",\n    \"query\": `query GroupEvents($search: String!) {\n      groups(where: {\n        search: $search\n      }) {\n        edges {\n          node {\n            id: databaseId\n            slug\n            title\n            groupDetails {\n              city {\n                ...on City {\n                  slug\n                }\n              }\n              day\n              description\n              image: icon {\n                mediaItemUrl\n              }\n              isActive\n              hasEvents\n              hasLocation\n              link\n              numMembers\n              recurring\n              recurrence\n              which\n              startTime\n              endTime\n              price\n              rewards\n              vibes {\n                slug\n              }\n              name\n              map {\n                latitude\n                longitude\n                streetAddress\n              }\n            }\n          }\n        }\n      }\n    }\n    `,\n    \"variables\": {\n      search: search\n    }\n  }\n\n  const response = await Axios({\n    url: 'https://cms.vibemap.com/graphql',\n    method: 'post',\n    data: query\n  }).catch((error) => {\n    console.log(`Error fetching events `, error.response)\n    return {\n      error: true,\n      data: {\n        data: []\n      },\n      message: error\n    }\n  })\n\n  const data = response.data\n    && response.data.data\n    && response.data.data.groups\n    && response.data.data.groups.edges\n  */\n  const filters = `?_fields=id,date,slug,title,acf&per_page=${per_page}`\n\n  const endpoint = `${GATSBY_WP_BASEURL + REST_PATH}group${filters}`\n  const response = await Axios.get(endpoint)\n    .catch(error => {\n      console.error(error.response.statusText)\n      return {\n        error: true,\n        data: {\n          data: []\n        },\n        message: error\n      }\n    })\n\n  const data = response.data\n\n  const dataByCity = data && typeof(data) === 'object'\n    ? data.filter(group => {\n      if (group.acf.map && city) {\n        const isMatch = city == group.acf.map.city\n        return isMatch\n      } else {\n        // Return everyting if there's no cit\n        group.title = group.title.rendered;\n        return true\n      }\n    })\n    : []\n\n  if (dataByCity) {\n    return {\n      error: false,\n      data: dataByCity,\n      message: `Got ${dataByCity.length} groups`\n    }\n  } else {\n    return {\n      error: true,\n      data: [],\n      message: `No data for groups`\n    }\n  }\n}\n\nexport const getPosts = async (\n  //args\n  filters = defaultFilters,\n  stickyOnly = false,\n  per_page = 20,\n  fields = [\n    'id',\n    'date',\n    'slug',\n    'status',\n    'type',\n    'link',\n    'title',\n    'content',\n    'excerpt',\n    'author',\n    'categories',\n    'vibe',\n    'blocks',\n    'acf',\n    'featured_media',\n    'featured_media_src_url',\n  ],\n  embed = false,\n) => {\n  const embedParameter = embed ? '&_embed' : ''\n  const apiFilters = `?_fields=${fields.join(',')}`\n  const endpoint = `${GATSBY_WP_BASEURL}${REST_PATH}posts${apiFilters}${embedParameter}`\n\n  // Sticky posts to be shown first\n  // TODO: Filter by the vibe or just score by it?\n  const paramsOverride = {\n    per_page: per_page,\n    cities: getTaxonomyIds('cities', filters.cities).toString(),\n    sticky: true\n  }\n\n  if (filters.category && filters.category.length > 0) {\n    paramsOverride.category = getTaxonomyIds('category', filters.category).toString()\n  }\n\n  if (filters.vibes && filters.vibes.length > 0) {\n    // TODO: User a more strict vibe search in some cases\n    // paramsOverride.vibe = getTaxonomyIds('vibe', filters.vibes).toString()\n    paramsOverride.search = filters.vibes.join(', ')\n  }\n\n  let top_posts = await Axios.get(endpoint, {\n    params: paramsOverride,\n  }).catch((error) => {\n    console.error(`Wordpress error`, error)\n  })\n\n  paramsOverride.sticky = false\n\n  let recent_posts = await Axios.get(endpoint, {\n    params: paramsOverride,\n  }).catch((error) => console.error(error))\n\n\t// TODO: Sort by vibe match\n  const excludeHiddenPosts = recent_posts.data\n    .filter((post) => post.acf.hide_post !== true)\n    .map((post) => {\n      // Look up display category in cached taxonomy\n      const findCategory = postCategories.filter(\n        (category) => category.id === post.categories[0]\n      );\n      post.category = findCategory ? findCategory[0].name : 'Guide'\n\n      return post\n    })\n\n  // Only sticky posts\n  if (stickyOnly === true) {\n    return top_posts\n  }\n\n  // Put stick posts on top\n  recent_posts.data = recent_posts\n    ? top_posts.data.concat(excludeHiddenPosts)\n    : top_posts\n\n  return recent_posts\n}\n\nexport const getPost = async (id) => {\n  const query = {\n    \"operationName\": \"PostDetails\",\n    \"query\": `query PostDetails($id: String!) {\n      posts {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n    `,\n    \"variables\": { id: id }\n  }\n  Axios({\n    url: 'https://cms.vibemap.com/graphql',\n    method: 'post',\n    data: query\n  }).then((result) => {\n    console.log(result.data)\n  });\n}\n"],"names":["axiosRetry","Axios","retries","retryDelay","exponentialDelay","jsonpack","require","GATSBY_WP_BASEURL","REST_PATH","helpers","postCategories","let","vibeTaxonomy","vibeTaxonomyPacked","unpack","error","console","log","defaultFilters","categories","cities","vibesets","vibes","getTaxonomyIds","type","filter","map","slug","matches","filterList","activityCategories","length","match","id","fetchBadges","async","endpoint","get","catch","fetchCities","per_page","cityFilters","fetchNeighborhoods","filters","page","postsPerPage","source","CancelToken","url","response","cancelToken","token","params","_embed","category","toString","numPages","parseInt","headers","fetchActivityCategories","fetchData","rest_slug","rest_url","data","combinedData","hasNext","nextData","next_page","concat","fetchCategories","getCityInfo","name","city","findCitySlug","result","findCityName","filterNeighborhoods","neighborhoods","title","rendered","neighborhood","includes","fetchVibeTaxonomy","fields","taxonomyFilters","join","getGroups","statusText","message","dataByCity","group","acf","getPosts","stickyOnly","embed","embedParameter","apiFilters","paramsOverride","sticky","search","top_posts","recent_posts","excludeHiddenPosts","post","hide_post","findCategory","getPost","method","operationName","query","variables","then"],"mappings":"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"}